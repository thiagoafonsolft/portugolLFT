/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        {
            List<PDecl> copy = new ArrayList<PDecl>(node.getDecl());
            for(PDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAProgram(node);
    }

    public void inAVarDecl(AVarDecl node)
    {
        defaultIn(node);
    }

    public void outAVarDecl(AVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDecl(AVarDecl node)
    {
        inAVarDecl(node);
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outAVarDecl(node);
    }

    public void inAConstDecl(AConstDecl node)
    {
        defaultIn(node);
    }

    public void outAConstDecl(AConstDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDecl(AConstDecl node)
    {
        inAConstDecl(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAConstDecl(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outAVetorVar(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inANInteiroValor(ANInteiroValor node)
    {
        defaultIn(node);
    }

    public void outANInteiroValor(ANInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInteiroValor(ANInteiroValor node)
    {
        inANInteiroValor(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outANInteiroValor(node);
    }

    public void inAAtribuirComando(AAtribuirComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuirComando(AAtribuirComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuirComando(AAtribuirComando node)
    {
        inAAtribuirComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAAtribuirComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        {
            List<PVar> copy = new ArrayList<PVar>(node.getVar());
            for(PVar e : copy)
            {
                e.apply(this);
            }
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        {
            List<PExpressao> copy = new ArrayList<PExpressao>(node.getExpressao());
            for(PExpressao e : copy)
            {
                e.apply(this);
            }
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outASeComando(node);
    }

    public void inASesenaoComando(ASesenaoComando node)
    {
        defaultIn(node);
    }

    public void outASesenaoComando(ASesenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASesenaoComando(ASesenaoComando node)
    {
        inASesenaoComando(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getEntao());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getSenao());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outASesenaoComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        {
            List<PValor> copy = new ArrayList<PValor>(node.getValor());
            for(PValor e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAAvalieComando(node);
    }

    public void inAAvaliesenaoComando(AAvaliesenaoComando node)
    {
        defaultIn(node);
    }

    public void outAAvaliesenaoComando(AAvaliesenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvaliesenaoComando(AAvaliesenaoComando node)
    {
        inAAvaliesenaoComando(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        {
            List<PValor> copy = new ArrayList<PValor>(node.getValor());
            for(PValor e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getCaso());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getSenao());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAAvaliesenaoComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAParaComando(node);
    }

    public void inAParapassoComando(AParapassoComando node)
    {
        defaultIn(node);
    }

    public void outAParapassoComando(AParapassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParapassoComando(AParapassoComando node)
    {
        inAParapassoComando(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAParapassoComando(node);
    }

    public void inAAritmeticaExpressao(AAritmeticaExpressao node)
    {
        defaultIn(node);
    }

    public void outAAritmeticaExpressao(AAritmeticaExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAritmeticaExpressao(AAritmeticaExpressao node)
    {
        inAAritmeticaExpressao(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAAritmeticaExpressao(node);
    }

    public void inALogicaExpressao(ALogicaExpressao node)
    {
        defaultIn(node);
    }

    public void outALogicaExpressao(ALogicaExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExpressao(ALogicaExpressao node)
    {
        inALogicaExpressao(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outALogicaExpressao(node);
    }

    public void inAValorExp(AValorExp node)
    {
        defaultIn(node);
    }

    public void outAValorExp(AValorExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorExp(AValorExp node)
    {
        inAValorExp(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorExp(node);
    }

    public void inAVarExp(AVarExp node)
    {
        defaultIn(node);
    }

    public void outAVarExp(AVarExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarExp(AVarExp node)
    {
        inAVarExp(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarExp(node);
    }

    public void inAExpparExp(AExpparExp node)
    {
        defaultIn(node);
    }

    public void outAExpparExp(AExpparExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpparExp(AExpparExp node)
    {
        inAExpparExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpparExp(node);
    }

    public void inAMenosexpExp(AMenosexpExp node)
    {
        defaultIn(node);
    }

    public void outAMenosexpExp(AMenosexpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenosexpExp(AMenosexpExp node)
    {
        inAMenosexpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAMenosexpExp(node);
    }

    public void inASomaExp(ASomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaExp(ASomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExp(ASomaExp node)
    {
        inASomaExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASomaExp(node);
    }

    public void inASubExp(ASubExp node)
    {
        defaultIn(node);
    }

    public void outASubExp(ASubExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExp(ASubExp node)
    {
        inASubExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outASubExp(node);
    }

    public void inAMultExp(AMultExp node)
    {
        defaultIn(node);
    }

    public void outAMultExp(AMultExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultExp(AMultExp node)
    {
        inAMultExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMultExp(node);
    }

    public void inADivExp(ADivExp node)
    {
        defaultIn(node);
    }

    public void outADivExp(ADivExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivExp(ADivExp node)
    {
        inADivExp(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADivExp(node);
    }

    public void inALogicaExp(ALogicaExp node)
    {
        defaultIn(node);
    }

    public void outALogicaExp(ALogicaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicaExp(ALogicaExp node)
    {
        inALogicaExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outALogicaExp(node);
    }

    public void inAExpExp(AExpExp node)
    {
        defaultIn(node);
    }

    public void outAExpExp(AExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExp(AExpExp node)
    {
        inAExpExp(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpExp(node);
    }

    public void inAParlogicaExpLogica(AParlogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outAParlogicaExpLogica(AParlogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParlogicaExpLogica(AParlogicaExpLogica node)
    {
        inAParlogicaExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAParlogicaExpLogica(node);
    }

    public void inAIgualExpLogica(AIgualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIgualExpLogica(AIgualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualExpLogica(AIgualExpLogica node)
    {
        inAIgualExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIgualExpLogica(node);
    }

    public void inAIguallogicaExpLogica(AIguallogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outAIguallogicaExpLogica(AIguallogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIguallogicaExpLogica(AIguallogicaExpLogica node)
    {
        inAIguallogicaExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAIguallogicaExpLogica(node);
    }

    public void inADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferenteExpLogica(ADiferenteExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteExpLogica(ADiferenteExpLogica node)
    {
        inADiferenteExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADiferenteExpLogica(node);
    }

    public void inADiferentelogicaExpLogica(ADiferentelogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outADiferentelogicaExpLogica(ADiferentelogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferentelogicaExpLogica(ADiferentelogicaExpLogica node)
    {
        inADiferentelogicaExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outADiferentelogicaExpLogica(node);
    }

    public void inAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualExpLogica(AMenorigualExpLogica node)
    {
        inAMenorigualExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenorigualExpLogica(node);
    }

    public void inAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualExpLogica(AMaiorigualExpLogica node)
    {
        inAMaiorigualExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMaiorigualExpLogica(node);
    }

    public void inAMenorExpLogica(AMenorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMenorExpLogica(AMenorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorExpLogica(AMenorExpLogica node)
    {
        inAMenorExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMenorExpLogica(node);
    }

    public void inAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultIn(node);
    }

    public void outAMaiorExpLogica(AMaiorExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorExpLogica(AMaiorExpLogica node)
    {
        inAMaiorExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAMaiorExpLogica(node);
    }

    public void inANegarlogicaExpLogica(ANegarlogicaExpLogica node)
    {
        defaultIn(node);
    }

    public void outANegarlogicaExpLogica(ANegarlogicaExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegarlogicaExpLogica(ANegarlogicaExpLogica node)
    {
        inANegarlogicaExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outANegarlogicaExpLogica(node);
    }

    public void inAElogicoExpLogica(AElogicoExpLogica node)
    {
        defaultIn(node);
    }

    public void outAElogicoExpLogica(AElogicoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElogicoExpLogica(AElogicoExpLogica node)
    {
        inAElogicoExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAElogicoExpLogica(node);
    }

    public void inAOulogicoExpLogica(AOulogicoExpLogica node)
    {
        defaultIn(node);
    }

    public void outAOulogicoExpLogica(AOulogicoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOulogicoExpLogica(AOulogicoExpLogica node)
    {
        inAOulogicoExpLogica(node);
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAOulogicoExpLogica(node);
    }

    public void inAXorlogicoExpLogica(AXorlogicoExpLogica node)
    {
        defaultIn(node);
    }

    public void outAXorlogicoExpLogica(AXorlogicoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorlogicoExpLogica(AXorlogicoExpLogica node)
    {
        inAXorlogicoExpLogica(node);
        if(node.getLfet() != null)
        {
            node.getLfet().apply(this);
        }
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        outAXorlogicoExpLogica(node);
    }

    public void inAExpExpLogica(AExpExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpExpLogica(AExpExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpExpLogica(AExpExpLogica node)
    {
        inAExpExpLogica(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpExpLogica(node);
    }
}
