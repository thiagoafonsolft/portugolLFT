/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import compilador.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAVarDecl(AVarDecl node);
    void caseAConstDecl(AConstDecl node);
    void caseAIdVar(AIdVar node);
    void caseAVetorVar(AVetorVar node);
    void caseARealTipo(ARealTipo node);
    void caseAInteiroTipo(AInteiroTipo node);
    void caseACaractereTipo(ACaractereTipo node);
    void caseAStringValor(AStringValor node);
    void caseANRealValor(ANRealValor node);
    void caseANInteiroValor(ANInteiroValor node);
    void caseAAtribuirComando(AAtribuirComando node);
    void caseALeiaComando(ALeiaComando node);
    void caseAEscrevaComando(AEscrevaComando node);
    void caseASeComando(ASeComando node);
    void caseASesenaoComando(ASesenaoComando node);
    void caseAAvalieComando(AAvalieComando node);
    void caseAAvaliesenaoComando(AAvaliesenaoComando node);
    void caseAEnquantoComando(AEnquantoComando node);
    void caseARepitaComando(ARepitaComando node);
    void caseAParaComando(AParaComando node);
    void caseAParapassoComando(AParapassoComando node);
    void caseAAritmeticaExpressao(AAritmeticaExpressao node);
    void caseALogicaExpressao(ALogicaExpressao node);
    void caseAValorExp(AValorExp node);
    void caseAVarExp(AVarExp node);
    void caseAExpparExp(AExpparExp node);
    void caseAMenosexpExp(AMenosexpExp node);
    void caseASomaExp(ASomaExp node);
    void caseASubExp(ASubExp node);
    void caseAMultExp(AMultExp node);
    void caseADivExp(ADivExp node);
    void caseALogicaExp(ALogicaExp node);
    void caseAExpExp(AExpExp node);
    void caseAParlogicaExpLogica(AParlogicaExpLogica node);
    void caseAIgualExpLogica(AIgualExpLogica node);
    void caseAIguallogicaExpLogica(AIguallogicaExpLogica node);
    void caseADiferenteExpLogica(ADiferenteExpLogica node);
    void caseADiferentelogicaExpLogica(ADiferentelogicaExpLogica node);
    void caseAMenorigualExpLogica(AMenorigualExpLogica node);
    void caseAMaiorigualExpLogica(AMaiorigualExpLogica node);
    void caseAMenorExpLogica(AMenorExpLogica node);
    void caseAMaiorExpLogica(AMaiorExpLogica node);
    void caseANegarlogicaExpLogica(ANegarlogicaExpLogica node);
    void caseAElogicoExpLogica(AElogicoExpLogica node);
    void caseAOulogicoExpLogica(AOulogicoExpLogica node);
    void caseAXorlogicoExpLogica(AXorlogicoExpLogica node);
    void caseAExpExpLogica(AExpExpLogica node);

    void caseTComentario(TComentario node);
    void caseTComentarioFim(TComentarioFim node);
    void caseTComentarioCorpo(TComentarioCorpo node);
    void caseTComentarioLinha(TComentarioLinha node);
    void caseTBranco(TBranco node);
    void caseTPrograma(TPrograma node);
    void caseTInicio(TInicio node);
    void caseTFimPrograma(TFimPrograma node);
    void caseTDoispontos(TDoispontos node);
    void caseTVirgula(TVirgula node);
    void caseTPontovirgula(TPontovirgula node);
    void caseTAbrecolchete(TAbrecolchete node);
    void caseTFechacolchete(TFechacolchete node);
    void caseTAbreparentese(TAbreparentese node);
    void caseTFechaparentese(TFechaparentese node);
    void caseTAtribuicao(TAtribuicao node);
    void caseTConst(TConst node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTCaractere(TCaractere node);
    void caseTNInteiro(TNInteiro node);
    void caseTNReal(TNReal node);
    void caseTString(TString node);
    void caseTAdicao(TAdicao node);
    void caseTSubtracao(TSubtracao node);
    void caseTMultiplicacao(TMultiplicacao node);
    void caseTDivisao(TDivisao node);
    void caseTLeia(TLeia node);
    void caseTEscreva(TEscreva node);
    void caseTSe(TSe node);
    void caseTEntao(TEntao node);
    void caseTSenao(TSenao node);
    void caseTFimse(TFimse node);
    void caseTEnquanto(TEnquanto node);
    void caseTFimenquanto(TFimenquanto node);
    void caseTFaca(TFaca node);
    void caseTRepita(TRepita node);
    void caseTDe(TDe node);
    void caseTAte(TAte node);
    void caseTAvalie(TAvalie node);
    void caseTFimavalie(TFimavalie node);
    void caseTCaso(TCaso node);
    void caseTPara(TPara node);
    void caseTFimpara(TFimpara node);
    void caseTPasso(TPasso node);
    void caseTE(TE node);
    void caseTOu(TOu node);
    void caseTXor(TXor node);
    void caseTIgual(TIgual node);
    void caseTDiferente(TDiferente node);
    void caseTMenor(TMenor node);
    void caseTMaior(TMaior node);
    void caseTMenorigual(TMenorigual node);
    void caseTMaiorigual(TMaiorigual node);
    void caseTNegacao(TNegacao node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
