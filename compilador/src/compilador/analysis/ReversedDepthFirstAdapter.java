/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPPrograma().apply(this);
        outStart(node);
    }

    public void inAPrograma(APrograma node)
    {
        defaultIn(node);
    }

    public void outAPrograma(APrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrograma(APrograma node)
    {
        inAPrograma(node);
        if(node.getFimPrograma() != null)
        {
            node.getFimPrograma().apply(this);
        }
        if(node.getComandoOp() != null)
        {
            node.getComandoOp().apply(this);
        }
        if(node.getDeclaracaoOp() != null)
        {
            node.getDeclaracaoOp().apply(this);
        }
        if(node.getProgramaInicio() != null)
        {
            node.getProgramaInicio().apply(this);
        }
        outAPrograma(node);
    }

    public void inAProgramaInicio(AProgramaInicio node)
    {
        defaultIn(node);
    }

    public void outAProgramaInicio(AProgramaInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgramaInicio(AProgramaInicio node)
    {
        inAProgramaInicio(node);
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAProgramaInicio(node);
    }

    public void inAListaDeclaracaoOp(AListaDeclaracaoOp node)
    {
        defaultIn(node);
    }

    public void outAListaDeclaracaoOp(AListaDeclaracaoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaDeclaracaoOp(AListaDeclaracaoOp node)
    {
        inAListaDeclaracaoOp(node);
        if(node.getDeclaracaoLista() != null)
        {
            node.getDeclaracaoLista().apply(this);
        }
        outAListaDeclaracaoOp(node);
    }

    public void inAEmptyDeclaracaoOp(AEmptyDeclaracaoOp node)
    {
        defaultIn(node);
    }

    public void outAEmptyDeclaracaoOp(AEmptyDeclaracaoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyDeclaracaoOp(AEmptyDeclaracaoOp node)
    {
        inAEmptyDeclaracaoOp(node);
        outAEmptyDeclaracaoOp(node);
    }

    public void inAListaComandoOp(AListaComandoOp node)
    {
        defaultIn(node);
    }

    public void outAListaComandoOp(AListaComandoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaComandoOp(AListaComandoOp node)
    {
        inAListaComandoOp(node);
        if(node.getComandoLista() != null)
        {
            node.getComandoLista().apply(this);
        }
        outAListaComandoOp(node);
    }

    public void inAEmptyComandoOp(AEmptyComandoOp node)
    {
        defaultIn(node);
    }

    public void outAEmptyComandoOp(AEmptyComandoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyComandoOp(AEmptyComandoOp node)
    {
        inAEmptyComandoOp(node);
        outAEmptyComandoOp(node);
    }

    public void inADecListaDeclaracaoLista(ADecListaDeclaracaoLista node)
    {
        defaultIn(node);
    }

    public void outADecListaDeclaracaoLista(ADecListaDeclaracaoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecListaDeclaracaoLista(ADecListaDeclaracaoLista node)
    {
        inADecListaDeclaracaoLista(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        if(node.getDeclaracaoLista() != null)
        {
            node.getDeclaracaoLista().apply(this);
        }
        outADecListaDeclaracaoLista(node);
    }

    public void inADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoDeclaracaoLista(ADeclaracaoDeclaracaoLista node)
    {
        inADeclaracaoDeclaracaoLista(node);
        if(node.getDeclaracao() != null)
        {
            node.getDeclaracao().apply(this);
        }
        outADeclaracaoDeclaracaoLista(node);
    }

    public void inAComListaComandoLista(AComListaComandoLista node)
    {
        defaultIn(node);
    }

    public void outAComListaComandoLista(AComListaComandoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComListaComandoLista(AComListaComandoLista node)
    {
        inAComListaComandoLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandoLista() != null)
        {
            node.getComandoLista().apply(this);
        }
        outAComListaComandoLista(node);
    }

    public void inAComandoComandoLista(AComandoComandoLista node)
    {
        defaultIn(node);
    }

    public void outAComandoComandoLista(AComandoComandoLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComandoLista(AComandoComandoLista node)
    {
        inAComandoComandoLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComandoLista(node);
    }

    public void inATipoDeclaracao(ATipoDeclaracao node)
    {
        defaultIn(node);
    }

    public void outATipoDeclaracao(ATipoDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipoDeclaracao(ATipoDeclaracao node)
    {
        inATipoDeclaracao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarVirgulaOp() != null)
        {
            node.getVarVirgulaOp().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outATipoDeclaracao(node);
    }

    public void inAConstDeclaracao(AConstDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstDeclaracao(AConstDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstDeclaracao(AConstDeclaracao node)
    {
        inAConstDeclaracao(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConst() != null)
        {
            node.getConst().apply(this);
        }
        outAConstDeclaracao(node);
    }

    public void inARealTipo(ARealTipo node)
    {
        defaultIn(node);
    }

    public void outARealTipo(ARealTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARealTipo(ARealTipo node)
    {
        inARealTipo(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outARealTipo(node);
    }

    public void inAInteiroTipo(AInteiroTipo node)
    {
        defaultIn(node);
    }

    public void outAInteiroTipo(AInteiroTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInteiroTipo(AInteiroTipo node)
    {
        inAInteiroTipo(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAInteiroTipo(node);
    }

    public void inACaractereTipo(ACaractereTipo node)
    {
        defaultIn(node);
    }

    public void outACaractereTipo(ACaractereTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereTipo(ACaractereTipo node)
    {
        inACaractereTipo(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereTipo(node);
    }

    public void inAIdVar(AIdVar node)
    {
        defaultIn(node);
    }

    public void outAIdVar(AIdVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVar(AIdVar node)
    {
        inAIdVar(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdVar(node);
    }

    public void inAVetorVar(AVetorVar node)
    {
        defaultIn(node);
    }

    public void outAVetorVar(AVetorVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVar(AVetorVar node)
    {
        inAVetorVar(node);
        if(node.getFechacolchete() != null)
        {
            node.getFechacolchete().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getAbrecolchete() != null)
        {
            node.getAbrecolchete().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVetorVar(node);
    }

    public void inAListaVarVirgulaOp(AListaVarVirgulaOp node)
    {
        defaultIn(node);
    }

    public void outAListaVarVirgulaOp(AListaVarVirgulaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaVarVirgulaOp(AListaVarVirgulaOp node)
    {
        inAListaVarVirgulaOp(node);
        if(node.getVarVirgulaLista() != null)
        {
            node.getVarVirgulaLista().apply(this);
        }
        outAListaVarVirgulaOp(node);
    }

    public void inAEmptyVarVirgulaOp(AEmptyVarVirgulaOp node)
    {
        defaultIn(node);
    }

    public void outAEmptyVarVirgulaOp(AEmptyVarVirgulaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyVarVirgulaOp(AEmptyVarVirgulaOp node)
    {
        inAEmptyVarVirgulaOp(node);
        outAEmptyVarVirgulaOp(node);
    }

    public void inAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node)
    {
        defaultIn(node);
    }

    public void outAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaListaVarVirgulaLista(AVirgulaListaVarVirgulaLista node)
    {
        inAVirgulaListaVarVirgulaLista(node);
        if(node.getVarVirgula() != null)
        {
            node.getVarVirgula().apply(this);
        }
        if(node.getVarVirgulaLista() != null)
        {
            node.getVarVirgulaLista().apply(this);
        }
        outAVirgulaListaVarVirgulaLista(node);
    }

    public void inAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node)
    {
        defaultIn(node);
    }

    public void outAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVirgulaVarVirgulaLista(AVarVirgulaVarVirgulaLista node)
    {
        inAVarVirgulaVarVirgulaLista(node);
        if(node.getVarVirgula() != null)
        {
            node.getVarVirgula().apply(this);
        }
        outAVarVirgulaVarVirgulaLista(node);
    }

    public void inAVarVirgula(AVarVirgula node)
    {
        defaultIn(node);
    }

    public void outAVarVirgula(AVarVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarVirgula(AVarVirgula node)
    {
        inAVarVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarVirgula(node);
    }

    public void inAStringValor(AStringValor node)
    {
        defaultIn(node);
    }

    public void outAStringValor(AStringValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValor(AStringValor node)
    {
        inAStringValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValor(node);
    }

    public void inANRealValor(ANRealValor node)
    {
        defaultIn(node);
    }

    public void outANRealValor(ANRealValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANRealValor(ANRealValor node)
    {
        inANRealValor(node);
        if(node.getNReal() != null)
        {
            node.getNReal().apply(this);
        }
        outANRealValor(node);
    }

    public void inANInteiroValor(ANInteiroValor node)
    {
        defaultIn(node);
    }

    public void outANInteiroValor(ANInteiroValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANInteiroValor(ANInteiroValor node)
    {
        inANInteiroValor(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        outANInteiroValor(node);
    }

    public void inAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoComando(AAtribuicaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoComando(AAtribuicaoComando node)
    {
        inAAtribuicaoComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtribuicao() != null)
        {
            node.getAtribuicao().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoComando(node);
    }

    public void inALeiaComando(ALeiaComando node)
    {
        defaultIn(node);
    }

    public void outALeiaComando(ALeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALeiaComando(ALeiaComando node)
    {
        inALeiaComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarVirgulaOp() != null)
        {
            node.getVarVirgulaOp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outALeiaComando(node);
    }

    public void inAEscrevaComando(AEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAEscrevaComando(AEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEscrevaComando(AEscrevaComando node)
    {
        inAEscrevaComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getExpVirgulaOp() != null)
        {
            node.getExpVirgulaOp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAEscrevaComando(node);
    }

    public void inASeComando(ASeComando node)
    {
        defaultIn(node);
    }

    public void outASeComando(ASeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASeComando(ASeComando node)
    {
        inASeComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        if(node.getSenaoOp() != null)
        {
            node.getSenaoOp().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExpLogicaLista() != null)
        {
            node.getExpLogicaLista().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outASeComando(node);
    }

    public void inAAvalieComando(AAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAAvalieComando(AAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAvalieComando(AAvalieComando node)
    {
        inAAvalieComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimavalie() != null)
        {
            node.getFimavalie().apply(this);
        }
        if(node.getSenaoDoispontosOp() != null)
        {
            node.getSenaoDoispontosOp().apply(this);
        }
        if(node.getCasoValorOp() != null)
        {
            node.getCasoValorOp().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAAvalieComando(node);
    }

    public void inAEnquantoComando(AEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAEnquantoComando(AEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEnquantoComando(AEnquantoComando node)
    {
        inAEnquantoComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimenquanto() != null)
        {
            node.getFimenquanto().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExpLogicaLista() != null)
        {
            node.getExpLogicaLista().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAEnquantoComando(node);
    }

    public void inARepitaComando(ARepitaComando node)
    {
        defaultIn(node);
    }

    public void outARepitaComando(ARepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARepitaComando(ARepitaComando node)
    {
        inARepitaComando(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExpLogicaLista() != null)
        {
            node.getExpLogicaLista().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outARepitaComando(node);
    }

    public void inAParaComando(AParaComando node)
    {
        defaultIn(node);
    }

    public void outAParaComando(AParaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaComando(AParaComando node)
    {
        inAParaComando(node);
        if(node.getParaFim() != null)
        {
            node.getParaFim().apply(this);
        }
        if(node.getParaInicio() != null)
        {
            node.getParaInicio().apply(this);
        }
        outAParaComando(node);
    }

    public void inAPassoComando(APassoComando node)
    {
        defaultIn(node);
    }

    public void outAPassoComando(APassoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPassoComando(APassoComando node)
    {
        inAPassoComando(node);
        if(node.getParaFim() != null)
        {
            node.getParaFim().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getParaInicio() != null)
        {
            node.getParaInicio().apply(this);
        }
        outAPassoComando(node);
    }

    public void inAListaComandoOpLista(AListaComandoOpLista node)
    {
        defaultIn(node);
    }

    public void outAListaComandoOpLista(AListaComandoOpLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaComandoOpLista(AListaComandoOpLista node)
    {
        inAListaComandoOpLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        outAListaComandoOpLista(node);
    }

    public void inAComandoComandoOpLista(AComandoComandoOpLista node)
    {
        defaultIn(node);
    }

    public void outAComandoComandoOpLista(AComandoComandoOpLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoComandoOpLista(AComandoComandoOpLista node)
    {
        inAComandoComandoOpLista(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoComandoOpLista(node);
    }

    public void inASenaoSenaoOp(ASenaoSenaoOp node)
    {
        defaultIn(node);
    }

    public void outASenaoSenaoOp(ASenaoSenaoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoSenaoOp(ASenaoSenaoOp node)
    {
        inASenaoSenaoOp(node);
        if(node.getSenaoComando() != null)
        {
            node.getSenaoComando().apply(this);
        }
        outASenaoSenaoOp(node);
    }

    public void inAEmptySenaoOp(AEmptySenaoOp node)
    {
        defaultIn(node);
    }

    public void outAEmptySenaoOp(AEmptySenaoOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySenaoOp(AEmptySenaoOp node)
    {
        inAEmptySenaoOp(node);
        outAEmptySenaoOp(node);
    }

    public void inASenaoSenaoDoispontosOp(ASenaoSenaoDoispontosOp node)
    {
        defaultIn(node);
    }

    public void outASenaoSenaoDoispontosOp(ASenaoSenaoDoispontosOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoSenaoDoispontosOp(ASenaoSenaoDoispontosOp node)
    {
        inASenaoSenaoDoispontosOp(node);
        if(node.getSenaoDoispontos() != null)
        {
            node.getSenaoDoispontos().apply(this);
        }
        outASenaoSenaoDoispontosOp(node);
    }

    public void inAEmptySenaoDoispontosOp(AEmptySenaoDoispontosOp node)
    {
        defaultIn(node);
    }

    public void outAEmptySenaoDoispontosOp(AEmptySenaoDoispontosOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptySenaoDoispontosOp(AEmptySenaoDoispontosOp node)
    {
        inAEmptySenaoDoispontosOp(node);
        outAEmptySenaoDoispontosOp(node);
    }

    public void inASenaoComando(ASenaoComando node)
    {
        defaultIn(node);
    }

    public void outASenaoComando(ASenaoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoComando(ASenaoComando node)
    {
        inASenaoComando(node);
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoComando(node);
    }

    public void inASenaoDoispontos(ASenaoDoispontos node)
    {
        defaultIn(node);
    }

    public void outASenaoDoispontos(ASenaoDoispontos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASenaoDoispontos(ASenaoDoispontos node)
    {
        inASenaoDoispontos(node);
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outASenaoDoispontos(node);
    }

    public void inACasoCasoValorOp(ACasoCasoValorOp node)
    {
        defaultIn(node);
    }

    public void outACasoCasoValorOp(ACasoCasoValorOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoCasoValorOp(ACasoCasoValorOp node)
    {
        inACasoCasoValorOp(node);
        if(node.getCasoValorLista() != null)
        {
            node.getCasoValorLista().apply(this);
        }
        outACasoCasoValorOp(node);
    }

    public void inAEmptyCasoValorOp(AEmptyCasoValorOp node)
    {
        defaultIn(node);
    }

    public void outAEmptyCasoValorOp(AEmptyCasoValorOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyCasoValorOp(AEmptyCasoValorOp node)
    {
        inAEmptyCasoValorOp(node);
        outAEmptyCasoValorOp(node);
    }

    public void inACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node)
    {
        defaultIn(node);
    }

    public void outACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoValorListaCasoValorLista(ACasoValorListaCasoValorLista node)
    {
        inACasoValorListaCasoValorLista(node);
        if(node.getCasoValor() != null)
        {
            node.getCasoValor().apply(this);
        }
        if(node.getCasoValorLista() != null)
        {
            node.getCasoValorLista().apply(this);
        }
        outACasoValorListaCasoValorLista(node);
    }

    public void inACasoValorCasoValorLista(ACasoValorCasoValorLista node)
    {
        defaultIn(node);
    }

    public void outACasoValorCasoValorLista(ACasoValorCasoValorLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoValorCasoValorLista(ACasoValorCasoValorLista node)
    {
        inACasoValorCasoValorLista(node);
        if(node.getCasoValor() != null)
        {
            node.getCasoValor().apply(this);
        }
        outACasoValorCasoValorLista(node);
    }

    public void inACasoValor(ACasoValor node)
    {
        defaultIn(node);
    }

    public void outACasoValor(ACasoValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasoValor(ACasoValor node)
    {
        inACasoValor(node);
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outACasoValor(node);
    }

    public void inAParaInicio(AParaInicio node)
    {
        defaultIn(node);
    }

    public void outAParaInicio(AParaInicio node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaInicio(AParaInicio node)
    {
        inAParaInicio(node);
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAParaInicio(node);
    }

    public void inAParaFim(AParaFim node)
    {
        defaultIn(node);
    }

    public void outAParaFim(AParaFim node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParaFim(AParaFim node)
    {
        inAParaFim(node);
        if(node.getPontovirgula() != null)
        {
            node.getPontovirgula().apply(this);
        }
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        if(node.getComandoOpLista() != null)
        {
            node.getComandoOpLista().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getNInteiro() != null)
        {
            node.getNInteiro().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        outAParaFim(node);
    }

    public void inASomaExpExp(ASomaExpExp node)
    {
        defaultIn(node);
    }

    public void outASomaExpExp(ASomaExpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaExpExp(ASomaExpExp node)
    {
        inASomaExpExp(node);
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        outASomaExpExp(node);
    }

    public void inASubtracaoexpExp(ASubtracaoexpExp node)
    {
        defaultIn(node);
    }

    public void outASubtracaoexpExp(ASubtracaoexpExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoexpExp(ASubtracaoexpExp node)
    {
        inASubtracaoexpExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubtracaoexpExp(node);
    }

    public void inAExpLogicaExp(AExpLogicaExp node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaExp(AExpLogicaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaExp(AExpLogicaExp node)
    {
        inAExpLogicaExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaExp(node);
    }

    public void inASomaRelacional(ASomaRelacional node)
    {
        defaultIn(node);
    }

    public void outASomaRelacional(ASomaRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaRelacional(ASomaRelacional node)
    {
        inASomaRelacional(node);
        if(node.getRelacional() != null)
        {
            node.getRelacional().apply(this);
        }
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        outASomaRelacional(node);
    }

    public void inASomaSomaExp(ASomaSomaExp node)
    {
        defaultIn(node);
    }

    public void outASomaSomaExp(ASomaSomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASomaSomaExp(ASomaSomaExp node)
    {
        inASomaSomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        if(node.getSoma() != null)
        {
            node.getSoma().apply(this);
        }
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        outASomaSomaExp(node);
    }

    public void inATermoSomaExp(ATermoSomaExp node)
    {
        defaultIn(node);
    }

    public void outATermoSomaExp(ATermoSomaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermoSomaExp(ATermoSomaExp node)
    {
        inATermoSomaExp(node);
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outATermoSomaExp(node);
    }

    public void inAMultTermo(AMultTermo node)
    {
        defaultIn(node);
    }

    public void outAMultTermo(AMultTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTermo(AMultTermo node)
    {
        inAMultTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTermo() != null)
        {
            node.getTermo().apply(this);
        }
        outAMultTermo(node);
    }

    public void inAFatorTermo(AFatorTermo node)
    {
        defaultIn(node);
    }

    public void outAFatorTermo(AFatorTermo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorTermo(AFatorTermo node)
    {
        inAFatorTermo(node);
        if(node.getFator() != null)
        {
            node.getFator().apply(this);
        }
        outAFatorTermo(node);
    }

    public void inAVirgulaExpVirgulaOp(AVirgulaExpVirgulaOp node)
    {
        defaultIn(node);
    }

    public void outAVirgulaExpVirgulaOp(AVirgulaExpVirgulaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVirgulaExpVirgulaOp(AVirgulaExpVirgulaOp node)
    {
        inAVirgulaExpVirgulaOp(node);
        if(node.getExpViruglaLista() != null)
        {
            node.getExpViruglaLista().apply(this);
        }
        outAVirgulaExpVirgulaOp(node);
    }

    public void inAEmptyExpVirgulaOp(AEmptyExpVirgulaOp node)
    {
        defaultIn(node);
    }

    public void outAEmptyExpVirgulaOp(AEmptyExpVirgulaOp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpVirgulaOp(AEmptyExpVirgulaOp node)
    {
        inAEmptyExpVirgulaOp(node);
        outAEmptyExpVirgulaOp(node);
    }

    public void inAListaExpViruglaLista(AListaExpViruglaLista node)
    {
        defaultIn(node);
    }

    public void outAListaExpViruglaLista(AListaExpViruglaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpViruglaLista(AListaExpViruglaLista node)
    {
        inAListaExpViruglaLista(node);
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        if(node.getExpViruglaLista() != null)
        {
            node.getExpViruglaLista().apply(this);
        }
        outAListaExpViruglaLista(node);
    }

    public void inAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node)
    {
        defaultIn(node);
    }

    public void outAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgulaExpViruglaLista(AExpVirgulaExpViruglaLista node)
    {
        inAExpVirgulaExpViruglaLista(node);
        if(node.getExpVirgula() != null)
        {
            node.getExpVirgula().apply(this);
        }
        outAExpVirgulaExpViruglaLista(node);
    }

    public void inAExpVirgula(AExpVirgula node)
    {
        defaultIn(node);
    }

    public void outAExpVirgula(AExpVirgula node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpVirgula(AExpVirgula node)
    {
        inAExpVirgula(node);
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpVirgula(node);
    }

    public void inAListaExpLogicaLista(AListaExpLogicaLista node)
    {
        defaultIn(node);
    }

    public void outAListaExpLogicaLista(AListaExpLogicaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListaExpLogicaLista(AListaExpLogicaLista node)
    {
        inAListaExpLogicaLista(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getExpLogicaLista() != null)
        {
            node.getExpLogicaLista().apply(this);
        }
        outAListaExpLogicaLista(node);
    }

    public void inAExpLogicaExpLogicaLista(AExpLogicaExpLogicaLista node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaExpLogicaLista(AExpLogicaExpLogicaLista node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaExpLogicaLista(AExpLogicaExpLogicaLista node)
    {
        inAExpLogicaExpLogicaLista(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaExpLogicaLista(node);
    }

    public void inARelacionalExpLogica(ARelacionalExpLogica node)
    {
        defaultIn(node);
    }

    public void outARelacionalExpLogica(ARelacionalExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelacionalExpLogica(ARelacionalExpLogica node)
    {
        inARelacionalExpLogica(node);
        if(node.getExpLogicaOriginal() != null)
        {
            node.getExpLogicaOriginal().apply(this);
        }
        outARelacionalExpLogica(node);
    }

    public void inANegacaoExpLogica(ANegacaoExpLogica node)
    {
        defaultIn(node);
    }

    public void outANegacaoExpLogica(ANegacaoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANegacaoExpLogica(ANegacaoExpLogica node)
    {
        inANegacaoExpLogica(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getNegacao() != null)
        {
            node.getNegacao().apply(this);
        }
        outANegacaoExpLogica(node);
    }

    public void inALogicoExpLogica(ALogicoExpLogica node)
    {
        defaultIn(node);
    }

    public void outALogicoExpLogica(ALogicoExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicoExpLogica(ALogicoExpLogica node)
    {
        inALogicoExpLogica(node);
        if(node.getLogicoEouxor() != null)
        {
            node.getLogicoEouxor().apply(this);
        }
        if(node.getExpLogicaOriginal() != null)
        {
            node.getExpLogicaOriginal().apply(this);
        }
        outALogicoExpLogica(node);
    }

    public void inAExpLogicaOriginal(AExpLogicaOriginal node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaOriginal(AExpLogicaOriginal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaOriginal(AExpLogicaOriginal node)
    {
        inAExpLogicaOriginal(node);
        if(node.getSomaExp() != null)
        {
            node.getSomaExp().apply(this);
        }
        if(node.getSomaRelacional() != null)
        {
            node.getSomaRelacional().apply(this);
        }
        outAExpLogicaOriginal(node);
    }

    public void inAAdicaoSoma(AAdicaoSoma node)
    {
        defaultIn(node);
    }

    public void outAAdicaoSoma(AAdicaoSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdicaoSoma(AAdicaoSoma node)
    {
        inAAdicaoSoma(node);
        if(node.getAdicao() != null)
        {
            node.getAdicao().apply(this);
        }
        outAAdicaoSoma(node);
    }

    public void inASubtracaoSoma(ASubtracaoSoma node)
    {
        defaultIn(node);
    }

    public void outASubtracaoSoma(ASubtracaoSoma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtracaoSoma(ASubtracaoSoma node)
    {
        inASubtracaoSoma(node);
        if(node.getSubtracao() != null)
        {
            node.getSubtracao().apply(this);
        }
        outASubtracaoSoma(node);
    }

    public void inAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        defaultIn(node);
    }

    public void outAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicacaoMult(AMultiplicacaoMult node)
    {
        inAMultiplicacaoMult(node);
        if(node.getMultiplicacao() != null)
        {
            node.getMultiplicacao().apply(this);
        }
        outAMultiplicacaoMult(node);
    }

    public void inADivisaoMult(ADivisaoMult node)
    {
        defaultIn(node);
    }

    public void outADivisaoMult(ADivisaoMult node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisaoMult(ADivisaoMult node)
    {
        inADivisaoMult(node);
        if(node.getDivisao() != null)
        {
            node.getDivisao().apply(this);
        }
        outADivisaoMult(node);
    }

    public void inALogicoEouxor(ALogicoEouxor node)
    {
        defaultIn(node);
    }

    public void outALogicoEouxor(ALogicoEouxor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALogicoEouxor(ALogicoEouxor node)
    {
        inALogicoEouxor(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getOpLogico() != null)
        {
            node.getOpLogico().apply(this);
        }
        outALogicoEouxor(node);
    }

    public void inAEOpLogico(AEOpLogico node)
    {
        defaultIn(node);
    }

    public void outAEOpLogico(AEOpLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEOpLogico(AEOpLogico node)
    {
        inAEOpLogico(node);
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        outAEOpLogico(node);
    }

    public void inAOuOpLogico(AOuOpLogico node)
    {
        defaultIn(node);
    }

    public void outAOuOpLogico(AOuOpLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuOpLogico(AOuOpLogico node)
    {
        inAOuOpLogico(node);
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        outAOuOpLogico(node);
    }

    public void inAXorOpLogico(AXorOpLogico node)
    {
        defaultIn(node);
    }

    public void outAXorOpLogico(AXorOpLogico node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAXorOpLogico(AXorOpLogico node)
    {
        inAXorOpLogico(node);
        if(node.getXor() != null)
        {
            node.getXor().apply(this);
        }
        outAXorOpLogico(node);
    }

    public void inAIgualRelacional(AIgualRelacional node)
    {
        defaultIn(node);
    }

    public void outAIgualRelacional(AIgualRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIgualRelacional(AIgualRelacional node)
    {
        inAIgualRelacional(node);
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        outAIgualRelacional(node);
    }

    public void inADiferenteRelacional(ADiferenteRelacional node)
    {
        defaultIn(node);
    }

    public void outADiferenteRelacional(ADiferenteRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADiferenteRelacional(ADiferenteRelacional node)
    {
        inADiferenteRelacional(node);
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        outADiferenteRelacional(node);
    }

    public void inAMenorigualRelacional(AMenorigualRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorigualRelacional(AMenorigualRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorigualRelacional(AMenorigualRelacional node)
    {
        inAMenorigualRelacional(node);
        if(node.getMenorigual() != null)
        {
            node.getMenorigual().apply(this);
        }
        outAMenorigualRelacional(node);
    }

    public void inAMaiorigualRelacional(AMaiorigualRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorigualRelacional(AMaiorigualRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorigualRelacional(AMaiorigualRelacional node)
    {
        inAMaiorigualRelacional(node);
        if(node.getMaiorigual() != null)
        {
            node.getMaiorigual().apply(this);
        }
        outAMaiorigualRelacional(node);
    }

    public void inAMenorRelacional(AMenorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMenorRelacional(AMenorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMenorRelacional(AMenorRelacional node)
    {
        inAMenorRelacional(node);
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        outAMenorRelacional(node);
    }

    public void inAMaiorRelacional(AMaiorRelacional node)
    {
        defaultIn(node);
    }

    public void outAMaiorRelacional(AMaiorRelacional node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMaiorRelacional(AMaiorRelacional node)
    {
        inAMaiorRelacional(node);
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        outAMaiorRelacional(node);
    }

    public void inAExpFator(AExpFator node)
    {
        defaultIn(node);
    }

    public void outAExpFator(AExpFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpFator(AExpFator node)
    {
        inAExpFator(node);
        if(node.getFechaparentese() != null)
        {
            node.getFechaparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAbreparentese() != null)
        {
            node.getAbreparentese().apply(this);
        }
        outAExpFator(node);
    }

    public void inAValorFator(AValorFator node)
    {
        defaultIn(node);
    }

    public void outAValorFator(AValorFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValorFator(AValorFator node)
    {
        inAValorFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAValorFator(node);
    }

    public void inAVarFator(AVarFator node)
    {
        defaultIn(node);
    }

    public void outAVarFator(AVarFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarFator(AVarFator node)
    {
        inAVarFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarFator(node);
    }
}
