/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PPrograma node1 = (PPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce APrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AProgramaInicio */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AListaDeclaracaoOp */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AEmptyDeclaracaoOp */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AListaComandoOp */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AEmptyComandoOp */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce ADecListaDeclaracaoLista */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce ADeclaracaoDeclaracaoLista */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AComListaComandoLista */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AComandoComandoLista */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce ATipo$Lista1Declaracao */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce ATipo$Empty1Declaracao */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AConstDeclaracao */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce ARealTipo */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list);
            }
            break;
            case 14: /* reduce AInteiroTipo */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list);
            }
            break;
            case 15: /* reduce ACaractereTipo */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce AIdVar */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list);
            }
            break;
            case 17: /* reduce AVetorVar */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list);
            }
            break;
            case 18: /* reduce AVirgulaListaVarVirgulaLista */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list);
            }
            break;
            case 19: /* reduce AVarVirgulaVarVirgulaLista */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list);
            }
            break;
            case 20: /* reduce AVarVirgula */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list);
            }
            break;
            case 21: /* reduce AStringValor */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list);
            }
            break;
            case 22: /* reduce ANRealValor */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list);
            }
            break;
            case 23: /* reduce ANInteiroValor */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list);
            }
            break;
            case 24: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list);
            }
            break;
            case 25: /* reduce ALeia$Lista1Comando */
            {
                ArrayList<Object> list = new25();
                push(goTo(12), list);
            }
            break;
            case 26: /* reduce ALeia$Empty1Comando */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list);
            }
            break;
            case 27: /* reduce AEscreva$Virgula1Comando */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AEscreva$Empty1Comando */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce ASeComando */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce AAvalieComando */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list);
            }
            break;
            case 31: /* reduce AEnquantoComando */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list);
            }
            break;
            case 32: /* reduce ARepitaComando */
            {
                ArrayList<Object> list = new32();
                push(goTo(12), list);
            }
            break;
            case 33: /* reduce AParaComando */
            {
                ArrayList<Object> list = new33();
                push(goTo(12), list);
            }
            break;
            case 34: /* reduce APassoComando */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AListaComandoOpLista */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AComandoComandoOpLista */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce ASenaoSenaoOp */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AEmptySenaoOp */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce ASenaoSenaoDoispontosOp */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AEmptySenaoDoispontosOp */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ASenaoComando */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce ASenaoDoispontos */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list);
            }
            break;
            case 43: /* reduce ACasoCasoValorOp */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list);
            }
            break;
            case 44: /* reduce AEmptyCasoValorOp */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce ACasoValorListaCasoValorLista */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce ACasoValorCasoValorLista */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce ACasoValor */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce AParaInicio */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce AParaFim */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce ASomaExpExp */
            {
                ArrayList<Object> list = new50();
                push(goTo(23), list);
            }
            break;
            case 51: /* reduce ASubtracaoexpExp */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list);
            }
            break;
            case 52: /* reduce AExpLogicaExp */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce ASomaRelacional */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list);
            }
            break;
            case 54: /* reduce ASomaSomaExp */
            {
                ArrayList<Object> list = new54();
                push(goTo(25), list);
            }
            break;
            case 55: /* reduce ATermoSomaExp */
            {
                ArrayList<Object> list = new55();
                push(goTo(25), list);
            }
            break;
            case 56: /* reduce AMultTermo */
            {
                ArrayList<Object> list = new56();
                push(goTo(26), list);
            }
            break;
            case 57: /* reduce AFatorTermo */
            {
                ArrayList<Object> list = new57();
                push(goTo(26), list);
            }
            break;
            case 58: /* reduce AListaExpViruglaLista */
            {
                ArrayList<Object> list = new58();
                push(goTo(27), list);
            }
            break;
            case 59: /* reduce AExpVirgulaExpViruglaLista */
            {
                ArrayList<Object> list = new59();
                push(goTo(27), list);
            }
            break;
            case 60: /* reduce AExpVirgula */
            {
                ArrayList<Object> list = new60();
                push(goTo(28), list);
            }
            break;
            case 61: /* reduce AListaExpLogicaLista */
            {
                ArrayList<Object> list = new61();
                push(goTo(29), list);
            }
            break;
            case 62: /* reduce AExpLogicaExpLogicaLista */
            {
                ArrayList<Object> list = new62();
                push(goTo(29), list);
            }
            break;
            case 63: /* reduce ARelacionalExpLogica */
            {
                ArrayList<Object> list = new63();
                push(goTo(30), list);
            }
            break;
            case 64: /* reduce ANegacaoExpLogica */
            {
                ArrayList<Object> list = new64();
                push(goTo(30), list);
            }
            break;
            case 65: /* reduce ALogicoExpLogica */
            {
                ArrayList<Object> list = new65();
                push(goTo(30), list);
            }
            break;
            case 66: /* reduce AExpLogicaOriginal */
            {
                ArrayList<Object> list = new66();
                push(goTo(31), list);
            }
            break;
            case 67: /* reduce AAdicaoSoma */
            {
                ArrayList<Object> list = new67();
                push(goTo(32), list);
            }
            break;
            case 68: /* reduce ASubtracaoSoma */
            {
                ArrayList<Object> list = new68();
                push(goTo(32), list);
            }
            break;
            case 69: /* reduce AMultiplicacaoMult */
            {
                ArrayList<Object> list = new69();
                push(goTo(33), list);
            }
            break;
            case 70: /* reduce ADivisaoMult */
            {
                ArrayList<Object> list = new70();
                push(goTo(33), list);
            }
            break;
            case 71: /* reduce ALogicoEouxor */
            {
                ArrayList<Object> list = new71();
                push(goTo(34), list);
            }
            break;
            case 72: /* reduce AEOpLogico */
            {
                ArrayList<Object> list = new72();
                push(goTo(35), list);
            }
            break;
            case 73: /* reduce AOuOpLogico */
            {
                ArrayList<Object> list = new73();
                push(goTo(35), list);
            }
            break;
            case 74: /* reduce AXorOpLogico */
            {
                ArrayList<Object> list = new74();
                push(goTo(35), list);
            }
            break;
            case 75: /* reduce AIgualRelacional */
            {
                ArrayList<Object> list = new75();
                push(goTo(36), list);
            }
            break;
            case 76: /* reduce ADiferenteRelacional */
            {
                ArrayList<Object> list = new76();
                push(goTo(36), list);
            }
            break;
            case 77: /* reduce AMenorigualRelacional */
            {
                ArrayList<Object> list = new77();
                push(goTo(36), list);
            }
            break;
            case 78: /* reduce AMaiorigualRelacional */
            {
                ArrayList<Object> list = new78();
                push(goTo(36), list);
            }
            break;
            case 79: /* reduce AMenorRelacional */
            {
                ArrayList<Object> list = new79();
                push(goTo(36), list);
            }
            break;
            case 80: /* reduce AMaiorRelacional */
            {
                ArrayList<Object> list = new80();
                push(goTo(36), list);
            }
            break;
            case 81: /* reduce AExpFator */
            {
                ArrayList<Object> list = new81();
                push(goTo(37), list);
            }
            break;
            case 82: /* reduce AValorFator */
            {
                ArrayList<Object> list = new82();
                push(goTo(37), list);
            }
            break;
            case 83: /* reduce AVarFator */
            {
                ArrayList<Object> list = new83();
                push(goTo(37), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce APrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrograma pprogramaNode1;
        {
            // Block
        PProgramaInicio pprogramainicioNode2;
        PDeclaracaoOp pdeclaracaoopNode3;
        PComandoOp pcomandoopNode4;
        TFimPrograma tfimprogramaNode5;
        pprogramainicioNode2 = (PProgramaInicio)nodeArrayList1.get(0);
        pdeclaracaoopNode3 = (PDeclaracaoOp)nodeArrayList2.get(0);
        pcomandoopNode4 = (PComandoOp)nodeArrayList3.get(0);
        tfimprogramaNode5 = (TFimPrograma)nodeArrayList4.get(0);

        pprogramaNode1 = new APrograma(pprogramainicioNode2, pdeclaracaoopNode3, pcomandoopNode4, tfimprogramaNode5);
        }
	nodeList.add(pprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AProgramaInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramaInicio pprogramainicioNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);

        pprogramainicioNode1 = new AProgramaInicio(tprogramaNode2, tidNode3, tinicioNode4);
        }
	nodeList.add(pprogramainicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AListaDeclaracaoOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoOp pdeclaracaoopNode1;
        {
            // Block
        PDeclaracaoLista pdeclaracaolistaNode2;
        pdeclaracaolistaNode2 = (PDeclaracaoLista)nodeArrayList1.get(0);

        pdeclaracaoopNode1 = new AListaDeclaracaoOp(pdeclaracaolistaNode2);
        }
	nodeList.add(pdeclaracaoopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AEmptyDeclaracaoOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracaoOp pdeclaracaoopNode1;
        {
            // Block

        pdeclaracaoopNode1 = new AEmptyDeclaracaoOp();
        }
	nodeList.add(pdeclaracaoopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AListaComandoOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOp pcomandoopNode1;
        {
            // Block
        PComandoLista pcomandolistaNode2;
        pcomandolistaNode2 = (PComandoLista)nodeArrayList1.get(0);

        pcomandoopNode1 = new AListaComandoOp(pcomandolistaNode2);
        }
	nodeList.add(pcomandoopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AEmptyComandoOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PComandoOp pcomandoopNode1;
        {
            // Block

        pcomandoopNode1 = new AEmptyComandoOp();
        }
	nodeList.add(pcomandoopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce ADecListaDeclaracaoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoLista pdeclaracaolistaNode1;
        {
            // Block
        PDeclaracaoLista pdeclaracaolistaNode2;
        PDeclaracao pdeclaracaoNode3;
        pdeclaracaolistaNode2 = (PDeclaracaoLista)nodeArrayList1.get(0);
        pdeclaracaoNode3 = (PDeclaracao)nodeArrayList2.get(0);

        pdeclaracaolistaNode1 = new ADecListaDeclaracaoLista(pdeclaracaolistaNode2, pdeclaracaoNode3);
        }
	nodeList.add(pdeclaracaolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADeclaracaoDeclaracaoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracaoLista pdeclaracaolistaNode1;
        {
            // Block
        PDeclaracao pdeclaracaoNode2;
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList1.get(0);

        pdeclaracaolistaNode1 = new ADeclaracaoDeclaracaoLista(pdeclaracaoNode2);
        }
	nodeList.add(pdeclaracaolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AComListaComandoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoLista pcomandolistaNode1;
        {
            // Block
        PComandoLista pcomandolistaNode2;
        PComando pcomandoNode3;
        pcomandolistaNode2 = (PComandoLista)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandolistaNode1 = new AComListaComandoLista(pcomandolistaNode2, pcomandoNode3);
        }
	nodeList.add(pcomandolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AComandoComandoLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoLista pcomandolistaNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        pcomandolistaNode1 = new AComandoComandoLista(pcomandoNode2);
        }
	nodeList.add(pcomandolistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATipo$Lista1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PVarVirgulaOp pvarvirgulaopNode4;
        PVar pvarNode6;
        TPontovirgula tpontovirgulaNode7;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        {
            // Block
        PVarVirgulaLista pvarvirgulalistaNode5;
        pvarvirgulalistaNode5 = (PVarVirgulaLista)nodeArrayList3.get(0);

        pvarvirgulaopNode4 = new AListaVarVirgulaOp(pvarvirgulalistaNode5);
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        tpontovirgulaNode7 = (TPontovirgula)nodeArrayList5.get(0);

        pdeclaracaoNode1 = new ATipoDeclaracao(ptipoNode2, tdoispontosNode3, pvarvirgulaopNode4, pvarNode6, tpontovirgulaNode7);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ATipo$Empty1Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PVarVirgulaOp pvarvirgulaopNode4;
        PVar pvarNode5;
        TPontovirgula tpontovirgulaNode6;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        {
            // Block

        pvarvirgulaopNode4 = new AEmptyVarVirgulaOp();
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        tpontovirgulaNode6 = (TPontovirgula)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new ATipoDeclaracao(ptipoNode2, tdoispontosNode3, pvarvirgulaopNode4, pvarNode5, tpontovirgulaNode6);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AConstDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConst tconstNode2;
        TId tidNode3;
        PValor pvalorNode4;
        TPontovirgula tpontovirgulaNode5;
        tconstNode2 = (TConst)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontovirgula)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AConstDeclaracao(tconstNode2, tidNode3, pvalorNode4, tpontovirgulaNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ARealTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        ptipoNode1 = new ARealTipo(trealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AInteiroTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        ptipoNode1 = new AInteiroTipo(tinteiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ACaractereTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ACaractereTipo(tcaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AIdVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVetorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        TAbrecolchete tabrecolcheteNode3;
        TNInteiro tninteiroNode4;
        TFechacolchete tfechacolcheteNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tabrecolcheteNode3 = (TAbrecolchete)nodeArrayList2.get(0);
        tninteiroNode4 = (TNInteiro)nodeArrayList3.get(0);
        tfechacolcheteNode5 = (TFechacolchete)nodeArrayList4.get(0);

        pvarNode1 = new AVetorVar(tidNode2, tabrecolcheteNode3, tninteiroNode4, tfechacolcheteNode5);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AVirgulaListaVarVirgulaLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarVirgulaLista pvarvirgulalistaNode1;
        {
            // Block
        PVarVirgulaLista pvarvirgulalistaNode2;
        PVarVirgula pvarvirgulaNode3;
        pvarvirgulalistaNode2 = (PVarVirgulaLista)nodeArrayList1.get(0);
        pvarvirgulaNode3 = (PVarVirgula)nodeArrayList2.get(0);

        pvarvirgulalistaNode1 = new AVirgulaListaVarVirgulaLista(pvarvirgulalistaNode2, pvarvirgulaNode3);
        }
	nodeList.add(pvarvirgulalistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AVarVirgulaVarVirgulaLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarVirgulaLista pvarvirgulalistaNode1;
        {
            // Block
        PVarVirgula pvarvirgulaNode2;
        pvarvirgulaNode2 = (PVarVirgula)nodeArrayList1.get(0);

        pvarvirgulalistaNode1 = new AVarVirgulaVarVirgulaLista(pvarvirgulaNode2);
        }
	nodeList.add(pvarvirgulalistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AVarVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarVirgula pvarvirgulaNode1;
        {
            // Block
        PVar pvarNode2;
        TVirgula tvirgulaNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pvarvirgulaNode1 = new AVarVirgula(pvarNode2, tvirgulaNode3);
        }
	nodeList.add(pvarvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AStringValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStringValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ANRealValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNReal tnrealNode2;
        tnrealNode2 = (TNReal)nodeArrayList1.get(0);

        pvalorNode1 = new ANRealValor(tnrealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ANInteiroValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TNInteiro tninteiroNode2;
        tninteiroNode2 = (TNInteiro)nodeArrayList1.get(0);

        pvalorNode1 = new ANInteiroValor(tninteiroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TAtribuicao tatribuicaoNode3;
        PExp pexpNode4;
        TPontovirgula tpontovirgulaNode5;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribuicaoNode3 = (TAtribuicao)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tpontovirgulaNode5 = (TPontovirgula)nodeArrayList4.get(0);

        pcomandoNode1 = new AAtribuicaoComando(pvarNode2, tatribuicaoNode3, pexpNode4, tpontovirgulaNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ALeia$Lista1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TLeia tleiaNode2;
        TAbreparentese tabreparenteseNode3;
        PVarVirgulaOp pvarvirgulaopNode4;
        PVar pvarNode6;
        TFechaparentese tfechaparenteseNode7;
        TPontovirgula tpontovirgulaNode8;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        {
            // Block
        PVarVirgulaLista pvarvirgulalistaNode5;
        pvarvirgulalistaNode5 = (PVarVirgulaLista)nodeArrayList3.get(0);

        pvarvirgulaopNode4 = new AListaVarVirgulaOp(pvarvirgulalistaNode5);
        }
        pvarNode6 = (PVar)nodeArrayList4.get(0);
        tfechaparenteseNode7 = (TFechaparentese)nodeArrayList5.get(0);
        tpontovirgulaNode8 = (TPontovirgula)nodeArrayList6.get(0);

        pcomandoNode1 = new ALeiaComando(tleiaNode2, tabreparenteseNode3, pvarvirgulaopNode4, pvarNode6, tfechaparenteseNode7, tpontovirgulaNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ALeia$Empty1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TLeia tleiaNode2;
        TAbreparentese tabreparenteseNode3;
        PVarVirgulaOp pvarvirgulaopNode4;
        PVar pvarNode5;
        TFechaparentese tfechaparenteseNode6;
        TPontovirgula tpontovirgulaNode7;
        tleiaNode2 = (TLeia)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        {
            // Block

        pvarvirgulaopNode4 = new AEmptyVarVirgulaOp();
        }
        pvarNode5 = (PVar)nodeArrayList3.get(0);
        tfechaparenteseNode6 = (TFechaparentese)nodeArrayList4.get(0);
        tpontovirgulaNode7 = (TPontovirgula)nodeArrayList5.get(0);

        pcomandoNode1 = new ALeiaComando(tleiaNode2, tabreparenteseNode3, pvarvirgulaopNode4, pvarNode5, tfechaparenteseNode6, tpontovirgulaNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AEscreva$Virgula1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TAbreparentese tabreparenteseNode3;
        PExpVirgulaOp pexpvirgulaopNode4;
        PExp pexpNode6;
        TFechaparentese tfechaparenteseNode7;
        TPontovirgula tpontovirgulaNode8;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        {
            // Block
        PExpViruglaLista pexpviruglalistaNode5;
        pexpviruglalistaNode5 = (PExpViruglaLista)nodeArrayList3.get(0);

        pexpvirgulaopNode4 = new AVirgulaExpVirgulaOp(pexpviruglalistaNode5);
        }
        pexpNode6 = (PExp)nodeArrayList4.get(0);
        tfechaparenteseNode7 = (TFechaparentese)nodeArrayList5.get(0);
        tpontovirgulaNode8 = (TPontovirgula)nodeArrayList6.get(0);

        pcomandoNode1 = new AEscrevaComando(tescrevaNode2, tabreparenteseNode3, pexpvirgulaopNode4, pexpNode6, tfechaparenteseNode7, tpontovirgulaNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AEscreva$Empty1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEscreva tescrevaNode2;
        TAbreparentese tabreparenteseNode3;
        PExpVirgulaOp pexpvirgulaopNode4;
        PExp pexpNode5;
        TFechaparentese tfechaparenteseNode6;
        TPontovirgula tpontovirgulaNode7;
        tescrevaNode2 = (TEscreva)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        {
            // Block

        pexpvirgulaopNode4 = new AEmptyExpVirgulaOp();
        }
        pexpNode5 = (PExp)nodeArrayList3.get(0);
        tfechaparenteseNode6 = (TFechaparentese)nodeArrayList4.get(0);
        tpontovirgulaNode7 = (TPontovirgula)nodeArrayList5.get(0);

        pcomandoNode1 = new AEscrevaComando(tescrevaNode2, tabreparenteseNode3, pexpvirgulaopNode4, pexpNode5, tfechaparenteseNode6, tpontovirgulaNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TSe tseNode2;
        TAbreparentese tabreparenteseNode3;
        PExpLogicaLista pexplogicalistaNode4;
        TFechaparentese tfechaparenteseNode5;
        TEntao tentaoNode6;
        PComandoOpLista pcomandooplistaNode7;
        PSenaoOp psenaoopNode8;
        TFimse tfimseNode9;
        TPontovirgula tpontovirgulaNode10;
        tseNode2 = (TSe)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        pexplogicalistaNode4 = (PExpLogicaLista)nodeArrayList3.get(0);
        tfechaparenteseNode5 = (TFechaparentese)nodeArrayList4.get(0);
        tentaoNode6 = (TEntao)nodeArrayList5.get(0);
        pcomandooplistaNode7 = (PComandoOpLista)nodeArrayList6.get(0);
        psenaoopNode8 = (PSenaoOp)nodeArrayList7.get(0);
        tfimseNode9 = (TFimse)nodeArrayList8.get(0);
        tpontovirgulaNode10 = (TPontovirgula)nodeArrayList9.get(0);

        pcomandoNode1 = new ASeComando(tseNode2, tabreparenteseNode3, pexplogicalistaNode4, tfechaparenteseNode5, tentaoNode6, pcomandooplistaNode7, psenaoopNode8, tfimseNode9, tpontovirgulaNode10);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAvalieComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TAvalie tavalieNode2;
        TAbreparentese tabreparenteseNode3;
        PExp pexpNode4;
        TFechaparentese tfechaparenteseNode5;
        PCasoValorOp pcasovaloropNode6;
        PSenaoDoispontosOp psenaodoispontosopNode7;
        TFimavalie tfimavalieNode8;
        TPontovirgula tpontovirgulaNode9;
        tavalieNode2 = (TAvalie)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tfechaparenteseNode5 = (TFechaparentese)nodeArrayList4.get(0);
        pcasovaloropNode6 = (PCasoValorOp)nodeArrayList5.get(0);
        psenaodoispontosopNode7 = (PSenaoDoispontosOp)nodeArrayList6.get(0);
        tfimavalieNode8 = (TFimavalie)nodeArrayList7.get(0);
        tpontovirgulaNode9 = (TPontovirgula)nodeArrayList8.get(0);

        pcomandoNode1 = new AAvalieComando(tavalieNode2, tabreparenteseNode3, pexpNode4, tfechaparenteseNode5, pcasovaloropNode6, psenaodoispontosopNode7, tfimavalieNode8, tpontovirgulaNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AEnquantoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TEnquanto tenquantoNode2;
        TAbreparentese tabreparenteseNode3;
        PExpLogicaLista pexplogicalistaNode4;
        TFechaparentese tfechaparenteseNode5;
        TFaca tfacaNode6;
        PComandoOpLista pcomandooplistaNode7;
        TFimenquanto tfimenquantoNode8;
        TPontovirgula tpontovirgulaNode9;
        tenquantoNode2 = (TEnquanto)nodeArrayList1.get(0);
        tabreparenteseNode3 = (TAbreparentese)nodeArrayList2.get(0);
        pexplogicalistaNode4 = (PExpLogicaLista)nodeArrayList3.get(0);
        tfechaparenteseNode5 = (TFechaparentese)nodeArrayList4.get(0);
        tfacaNode6 = (TFaca)nodeArrayList5.get(0);
        pcomandooplistaNode7 = (PComandoOpLista)nodeArrayList6.get(0);
        tfimenquantoNode8 = (TFimenquanto)nodeArrayList7.get(0);
        tpontovirgulaNode9 = (TPontovirgula)nodeArrayList8.get(0);

        pcomandoNode1 = new AEnquantoComando(tenquantoNode2, tabreparenteseNode3, pexplogicalistaNode4, tfechaparenteseNode5, tfacaNode6, pcomandooplistaNode7, tfimenquantoNode8, tpontovirgulaNode9);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ARepitaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        TRepita trepitaNode2;
        PComandoOpLista pcomandooplistaNode3;
        TAte tateNode4;
        TAbreparentese tabreparenteseNode5;
        PExpLogicaLista pexplogicalistaNode6;
        TFechaparentese tfechaparenteseNode7;
        TPontovirgula tpontovirgulaNode8;
        trepitaNode2 = (TRepita)nodeArrayList1.get(0);
        pcomandooplistaNode3 = (PComandoOpLista)nodeArrayList2.get(0);
        tateNode4 = (TAte)nodeArrayList3.get(0);
        tabreparenteseNode5 = (TAbreparentese)nodeArrayList4.get(0);
        pexplogicalistaNode6 = (PExpLogicaLista)nodeArrayList5.get(0);
        tfechaparenteseNode7 = (TFechaparentese)nodeArrayList6.get(0);
        tpontovirgulaNode8 = (TPontovirgula)nodeArrayList7.get(0);

        pcomandoNode1 = new ARepitaComando(trepitaNode2, pcomandooplistaNode3, tateNode4, tabreparenteseNode5, pexplogicalistaNode6, tfechaparenteseNode7, tpontovirgulaNode8);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AParaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PParaInicio pparainicioNode2;
        PParaFim pparafimNode3;
        pparainicioNode2 = (PParaInicio)nodeArrayList1.get(0);
        pparafimNode3 = (PParaFim)nodeArrayList2.get(0);

        pcomandoNode1 = new AParaComando(pparainicioNode2, pparafimNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce APassoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PParaInicio pparainicioNode2;
        TPasso tpassoNode3;
        TNInteiro tninteiroNode4;
        PParaFim pparafimNode5;
        pparainicioNode2 = (PParaInicio)nodeArrayList1.get(0);
        tpassoNode3 = (TPasso)nodeArrayList2.get(0);
        tninteiroNode4 = (TNInteiro)nodeArrayList3.get(0);
        pparafimNode5 = (PParaFim)nodeArrayList4.get(0);

        pcomandoNode1 = new APassoComando(pparainicioNode2, tpassoNode3, tninteiroNode4, pparafimNode5);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AListaComandoOpLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOpLista pcomandooplistaNode1;
        {
            // Block
        PComandoOpLista pcomandooplistaNode2;
        PComando pcomandoNode3;
        pcomandooplistaNode2 = (PComandoOpLista)nodeArrayList1.get(0);
        pcomandoNode3 = (PComando)nodeArrayList2.get(0);

        pcomandooplistaNode1 = new AListaComandoOpLista(pcomandooplistaNode2, pcomandoNode3);
        }
	nodeList.add(pcomandooplistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComandoComandoOpLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoOpLista pcomandooplistaNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        pcomandooplistaNode1 = new AComandoComandoOpLista(pcomandoNode2);
        }
	nodeList.add(pcomandooplistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ASenaoSenaoOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoOp psenaoopNode1;
        {
            // Block
        PSenaoComando psenaocomandoNode2;
        psenaocomandoNode2 = (PSenaoComando)nodeArrayList1.get(0);

        psenaoopNode1 = new ASenaoSenaoOp(psenaocomandoNode2);
        }
	nodeList.add(psenaoopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEmptySenaoOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSenaoOp psenaoopNode1;
        {
            // Block

        psenaoopNode1 = new AEmptySenaoOp();
        }
	nodeList.add(psenaoopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASenaoSenaoDoispontosOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoDoispontosOp psenaodoispontosopNode1;
        {
            // Block
        PSenaoDoispontos psenaodoispontosNode2;
        psenaodoispontosNode2 = (PSenaoDoispontos)nodeArrayList1.get(0);

        psenaodoispontosopNode1 = new ASenaoSenaoDoispontosOp(psenaodoispontosNode2);
        }
	nodeList.add(psenaodoispontosopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AEmptySenaoDoispontosOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PSenaoDoispontosOp psenaodoispontosopNode1;
        {
            // Block

        psenaodoispontosopNode1 = new AEmptySenaoDoispontosOp();
        }
	nodeList.add(psenaodoispontosopNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ASenaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoComando psenaocomandoNode1;
        {
            // Block
        TSenao tsenaoNode2;
        PComandoOpLista pcomandooplistaNode3;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        pcomandooplistaNode3 = (PComandoOpLista)nodeArrayList2.get(0);

        psenaocomandoNode1 = new ASenaoComando(tsenaoNode2, pcomandooplistaNode3);
        }
	nodeList.add(psenaocomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASenaoDoispontos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSenaoDoispontos psenaodoispontosNode1;
        {
            // Block
        TSenao tsenaoNode2;
        TDoispontos tdoispontosNode3;
        PComandoOpLista pcomandooplistaNode4;
        tsenaoNode2 = (TSenao)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pcomandooplistaNode4 = (PComandoOpLista)nodeArrayList3.get(0);

        psenaodoispontosNode1 = new ASenaoDoispontos(tsenaoNode2, tdoispontosNode3, pcomandooplistaNode4);
        }
	nodeList.add(psenaodoispontosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ACasoCasoValorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoValorOp pcasovaloropNode1;
        {
            // Block
        PCasoValorLista pcasovalorlistaNode2;
        pcasovalorlistaNode2 = (PCasoValorLista)nodeArrayList1.get(0);

        pcasovaloropNode1 = new ACasoCasoValorOp(pcasovalorlistaNode2);
        }
	nodeList.add(pcasovaloropNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AEmptyCasoValorOp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PCasoValorOp pcasovaloropNode1;
        {
            // Block

        pcasovaloropNode1 = new AEmptyCasoValorOp();
        }
	nodeList.add(pcasovaloropNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ACasoValorListaCasoValorLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoValorLista pcasovalorlistaNode1;
        {
            // Block
        PCasoValorLista pcasovalorlistaNode2;
        PCasoValor pcasovalorNode3;
        pcasovalorlistaNode2 = (PCasoValorLista)nodeArrayList1.get(0);
        pcasovalorNode3 = (PCasoValor)nodeArrayList2.get(0);

        pcasovalorlistaNode1 = new ACasoValorListaCasoValorLista(pcasovalorlistaNode2, pcasovalorNode3);
        }
	nodeList.add(pcasovalorlistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ACasoValorCasoValorLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoValorLista pcasovalorlistaNode1;
        {
            // Block
        PCasoValor pcasovalorNode2;
        pcasovalorNode2 = (PCasoValor)nodeArrayList1.get(0);

        pcasovalorlistaNode1 = new ACasoValorCasoValorLista(pcasovalorNode2);
        }
	nodeList.add(pcasovalorlistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ACasoValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasoValor pcasovalorNode1;
        {
            // Block
        TCaso tcasoNode2;
        PValor pvalorNode3;
        TDoispontos tdoispontosNode4;
        PComandoOpLista pcomandooplistaNode5;
        tcasoNode2 = (TCaso)nodeArrayList1.get(0);
        pvalorNode3 = (PValor)nodeArrayList2.get(0);
        tdoispontosNode4 = (TDoispontos)nodeArrayList3.get(0);
        pcomandooplistaNode5 = (PComandoOpLista)nodeArrayList4.get(0);

        pcasovalorNode1 = new ACasoValor(tcasoNode2, pvalorNode3, tdoispontosNode4, pcomandooplistaNode5);
        }
	nodeList.add(pcasovalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AParaInicio */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParaInicio pparainicioNode1;
        {
            // Block
        TPara tparaNode2;
        PVar pvarNode3;
        TDe tdeNode4;
        TNInteiro tninteiroNode5;
        tparaNode2 = (TPara)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList2.get(0);
        tdeNode4 = (TDe)nodeArrayList3.get(0);
        tninteiroNode5 = (TNInteiro)nodeArrayList4.get(0);

        pparainicioNode1 = new AParaInicio(tparaNode2, pvarNode3, tdeNode4, tninteiroNode5);
        }
	nodeList.add(pparainicioNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AParaFim */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PParaFim pparafimNode1;
        {
            // Block
        TAte tateNode2;
        TNInteiro tninteiroNode3;
        TFaca tfacaNode4;
        PComandoOpLista pcomandooplistaNode5;
        TFimpara tfimparaNode6;
        TPontovirgula tpontovirgulaNode7;
        tateNode2 = (TAte)nodeArrayList1.get(0);
        tninteiroNode3 = (TNInteiro)nodeArrayList2.get(0);
        tfacaNode4 = (TFaca)nodeArrayList3.get(0);
        pcomandooplistaNode5 = (PComandoOpLista)nodeArrayList4.get(0);
        tfimparaNode6 = (TFimpara)nodeArrayList5.get(0);
        tpontovirgulaNode7 = (TPontovirgula)nodeArrayList6.get(0);

        pparafimNode1 = new AParaFim(tateNode2, tninteiroNode3, tfacaNode4, pcomandooplistaNode5, tfimparaNode6, tpontovirgulaNode7);
        }
	nodeList.add(pparafimNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ASomaExpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PSomaExp psomaexpNode2;
        psomaexpNode2 = (PSomaExp)nodeArrayList1.get(0);

        pexpNode1 = new ASomaExpExp(psomaexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASubtracaoexpExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        TSubtracao tsubtracaoNode2;
        PExp pexpNode3;
        tsubtracaoNode2 = (TSubtracao)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);

        pexpNode1 = new ASubtracaoexpExp(tsubtracaoNode2, pexpNode3);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AExpLogicaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpNode1 = new AExpLogicaExp(pexplogicaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASomaRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaRelacional psomarelacionalNode1;
        {
            // Block
        PSomaExp psomaexpNode2;
        PRelacional prelacionalNode3;
        psomaexpNode2 = (PSomaExp)nodeArrayList1.get(0);
        prelacionalNode3 = (PRelacional)nodeArrayList2.get(0);

        psomarelacionalNode1 = new ASomaRelacional(psomaexpNode2, prelacionalNode3);
        }
	nodeList.add(psomarelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASomaSomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaExp psomaexpNode1;
        {
            // Block
        PSomaExp psomaexpNode2;
        PSoma psomaNode3;
        PTermo ptermoNode4;
        psomaexpNode2 = (PSomaExp)nodeArrayList1.get(0);
        psomaNode3 = (PSoma)nodeArrayList2.get(0);
        ptermoNode4 = (PTermo)nodeArrayList3.get(0);

        psomaexpNode1 = new ASomaSomaExp(psomaexpNode2, psomaNode3, ptermoNode4);
        }
	nodeList.add(psomaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ATermoSomaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSomaExp psomaexpNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        psomaexpNode1 = new ATermoSomaExp(ptermoNode2);
        }
	nodeList.add(psomaexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMultTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PTermo ptermoNode2;
        PMult pmultNode3;
        PFator pfatorNode4;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);
        pmultNode3 = (PMult)nodeArrayList2.get(0);
        pfatorNode4 = (PFator)nodeArrayList3.get(0);

        ptermoNode1 = new AMultTermo(ptermoNode2, pmultNode3, pfatorNode4);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AFatorTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PFator pfatorNode2;
        pfatorNode2 = (PFator)nodeArrayList1.get(0);

        ptermoNode1 = new AFatorTermo(pfatorNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AListaExpViruglaLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpViruglaLista pexpviruglalistaNode1;
        {
            // Block
        PExpViruglaLista pexpviruglalistaNode2;
        PExpVirgula pexpvirgulaNode3;
        pexpviruglalistaNode2 = (PExpViruglaLista)nodeArrayList1.get(0);
        pexpvirgulaNode3 = (PExpVirgula)nodeArrayList2.get(0);

        pexpviruglalistaNode1 = new AListaExpViruglaLista(pexpviruglalistaNode2, pexpvirgulaNode3);
        }
	nodeList.add(pexpviruglalistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AExpVirgulaExpViruglaLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpViruglaLista pexpviruglalistaNode1;
        {
            // Block
        PExpVirgula pexpvirgulaNode2;
        pexpvirgulaNode2 = (PExpVirgula)nodeArrayList1.get(0);

        pexpviruglalistaNode1 = new AExpVirgulaExpViruglaLista(pexpvirgulaNode2);
        }
	nodeList.add(pexpviruglalistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpVirgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpVirgula pexpvirgulaNode1;
        {
            // Block
        PExp pexpNode2;
        TVirgula tvirgulaNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);

        pexpvirgulaNode1 = new AExpVirgula(pexpNode2, tvirgulaNode3);
        }
	nodeList.add(pexpvirgulaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AListaExpLogicaLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaLista pexplogicalistaNode1;
        {
            // Block
        PExpLogicaLista pexplogicalistaNode2;
        PExpLogica pexplogicaNode3;
        pexplogicalistaNode2 = (PExpLogicaLista)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicalistaNode1 = new AListaExpLogicaLista(pexplogicalistaNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicalistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExpLogicaExpLogicaLista */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaLista pexplogicalistaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexplogicalistaNode1 = new AExpLogicaExpLogicaLista(pexplogicaNode2);
        }
	nodeList.add(pexplogicalistaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ARelacionalExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogicaOriginal pexplogicaoriginalNode2;
        pexplogicaoriginalNode2 = (PExpLogicaOriginal)nodeArrayList1.get(0);

        pexplogicaNode1 = new ARelacionalExpLogica(pexplogicaoriginalNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANegacaoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        TNegacao tnegacaoNode2;
        PExpLogica pexplogicaNode3;
        tnegacaoNode2 = (TNegacao)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANegacaoExpLogica(tnegacaoNode2, pexplogicaNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ALogicoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogicaOriginal pexplogicaoriginalNode2;
        PLogicoEouxor plogicoeouxorNode3;
        pexplogicaoriginalNode2 = (PExpLogicaOriginal)nodeArrayList1.get(0);
        plogicoeouxorNode3 = (PLogicoEouxor)nodeArrayList2.get(0);

        pexplogicaNode1 = new ALogicoExpLogica(pexplogicaoriginalNode2, plogicoeouxorNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AExpLogicaOriginal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaOriginal pexplogicaoriginalNode1;
        {
            // Block
        PSomaRelacional psomarelacionalNode2;
        PSomaExp psomaexpNode3;
        psomarelacionalNode2 = (PSomaRelacional)nodeArrayList1.get(0);
        psomaexpNode3 = (PSomaExp)nodeArrayList2.get(0);

        pexplogicaoriginalNode1 = new AExpLogicaOriginal(psomarelacionalNode2, psomaexpNode3);
        }
	nodeList.add(pexplogicaoriginalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AAdicaoSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TAdicao tadicaoNode2;
        tadicaoNode2 = (TAdicao)nodeArrayList1.get(0);

        psomaNode1 = new AAdicaoSoma(tadicaoNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ASubtracaoSoma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSoma psomaNode1;
        {
            // Block
        TSubtracao tsubtracaoNode2;
        tsubtracaoNode2 = (TSubtracao)nodeArrayList1.get(0);

        psomaNode1 = new ASubtracaoSoma(tsubtracaoNode2);
        }
	nodeList.add(psomaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AMultiplicacaoMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        TMultiplicacao tmultiplicacaoNode2;
        tmultiplicacaoNode2 = (TMultiplicacao)nodeArrayList1.get(0);

        pmultNode1 = new AMultiplicacaoMult(tmultiplicacaoNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ADivisaoMult */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMult pmultNode1;
        {
            // Block
        TDivisao tdivisaoNode2;
        tdivisaoNode2 = (TDivisao)nodeArrayList1.get(0);

        pmultNode1 = new ADivisaoMult(tdivisaoNode2);
        }
	nodeList.add(pmultNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ALogicoEouxor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLogicoEouxor plogicoeouxorNode1;
        {
            // Block
        POpLogico poplogicoNode2;
        PExpLogica pexplogicaNode3;
        poplogicoNode2 = (POpLogico)nodeArrayList1.get(0);
        pexplogicaNode3 = (PExpLogica)nodeArrayList2.get(0);

        plogicoeouxorNode1 = new ALogicoEouxor(poplogicoNode2, pexplogicaNode3);
        }
	nodeList.add(plogicoeouxorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce AEOpLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpLogico poplogicoNode1;
        {
            // Block
        TE teNode2;
        teNode2 = (TE)nodeArrayList1.get(0);

        poplogicoNode1 = new AEOpLogico(teNode2);
        }
	nodeList.add(poplogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AOuOpLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpLogico poplogicoNode1;
        {
            // Block
        TOu touNode2;
        touNode2 = (TOu)nodeArrayList1.get(0);

        poplogicoNode1 = new AOuOpLogico(touNode2);
        }
	nodeList.add(poplogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AXorOpLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        POpLogico poplogicoNode1;
        {
            // Block
        TXor txorNode2;
        txorNode2 = (TXor)nodeArrayList1.get(0);

        poplogicoNode1 = new AXorOpLogico(txorNode2);
        }
	nodeList.add(poplogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AIgualRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacional prelacionalNode1;
        {
            // Block
        TIgual tigualNode2;
        tigualNode2 = (TIgual)nodeArrayList1.get(0);

        prelacionalNode1 = new AIgualRelacional(tigualNode2);
        }
	nodeList.add(prelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ADiferenteRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacional prelacionalNode1;
        {
            // Block
        TDiferente tdiferenteNode2;
        tdiferenteNode2 = (TDiferente)nodeArrayList1.get(0);

        prelacionalNode1 = new ADiferenteRelacional(tdiferenteNode2);
        }
	nodeList.add(prelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce AMenorigualRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacional prelacionalNode1;
        {
            // Block
        TMenorigual tmenorigualNode2;
        tmenorigualNode2 = (TMenorigual)nodeArrayList1.get(0);

        prelacionalNode1 = new AMenorigualRelacional(tmenorigualNode2);
        }
	nodeList.add(prelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce AMaiorigualRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacional prelacionalNode1;
        {
            // Block
        TMaiorigual tmaiorigualNode2;
        tmaiorigualNode2 = (TMaiorigual)nodeArrayList1.get(0);

        prelacionalNode1 = new AMaiorigualRelacional(tmaiorigualNode2);
        }
	nodeList.add(prelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AMenorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacional prelacionalNode1;
        {
            // Block
        TMenor tmenorNode2;
        tmenorNode2 = (TMenor)nodeArrayList1.get(0);

        prelacionalNode1 = new AMenorRelacional(tmenorNode2);
        }
	nodeList.add(prelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AMaiorRelacional */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PRelacional prelacionalNode1;
        {
            // Block
        TMaior tmaiorNode2;
        tmaiorNode2 = (TMaior)nodeArrayList1.get(0);

        prelacionalNode1 = new AMaiorRelacional(tmaiorNode2);
        }
	nodeList.add(prelacionalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce AExpFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        TAbreparentese tabreparenteseNode2;
        PExp pexpNode3;
        TFechaparentese tfechaparenteseNode4;
        tabreparenteseNode2 = (TAbreparentese)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        tfechaparenteseNode4 = (TFechaparentese)nodeArrayList3.get(0);

        pfatorNode1 = new AExpFator(tabreparenteseNode2, pexpNode3, tfechaparenteseNode4);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce AValorFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pfatorNode1 = new AValorFator(pvalorNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AVarFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFator pfatorNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfatorNode1 = new AVarFator(pvarNode2);
        }
	nodeList.add(pfatorNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {2, SHIFT, 1}, },
			{{-1, ERROR, 1}, {52, SHIFT, 4}, },
			{{-1, ERROR, 2}, {53, ACCEPT, -1}, },
			{{-1, REDUCE, 3}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, },
			{{-1, ERROR, 4}, {3, SHIFT, 13}, },
			{{-1, ERROR, 5}, {52, SHIFT, 14}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 5}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 2}, {13, SHIFT, 5}, {14, SHIFT, 6}, {15, SHIFT, 7}, {16, SHIFT, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 12}, {5, SHIFT, 29}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 14}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, },
			{{-1, ERROR, 15}, {10, SHIFT, 34}, },
			{{-1, ERROR, 16}, {10, SHIFT, 35}, },
			{{-1, ERROR, 17}, {10, SHIFT, 36}, },
			{{-1, ERROR, 18}, {10, SHIFT, 37}, },
			{{-1, ERROR, 19}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 20}, {10, SHIFT, 40}, },
			{{-1, ERROR, 21}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 16}, {8, SHIFT, 42}, },
			{{-1, ERROR, 23}, {4, SHIFT, 43}, },
			{{-1, REDUCE, 4}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 25}, {12, SHIFT, 45}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 27}, {35, SHIFT, 46}, {41, SHIFT, 47}, },
			{{-1, REDUCE, 6}, },
			{{-1, ERROR, 29}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 33}, {7, SHIFT, 52}, },
			{{-1, ERROR, 34}, {52, SHIFT, 22}, },
			{{-1, ERROR, 35}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {21, SHIFT, 56}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 36}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 37}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 36}, },
			{{-1, ERROR, 39}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {35, SHIFT, 73}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 40}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {21, SHIFT, 56}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 41}, {34, SHIFT, 76}, },
			{{-1, ERROR, 42}, {17, SHIFT, 77}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 8}, },
			{{-1, ERROR, 45}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {21, SHIFT, 56}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 46}, {17, SHIFT, 79}, },
			{{-1, ERROR, 47}, {17, SHIFT, 80}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 49}, {6, SHIFT, 81}, {7, SHIFT, 82}, },
			{{-1, ERROR, 50}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 53}, {6, SHIFT, 81}, {11, SHIFT, 85}, },
			{{-1, ERROR, 54}, {52, SHIFT, 22}, },
			{{-1, ERROR, 55}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {21, SHIFT, 56}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 56}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {21, SHIFT, 56}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 57}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 82}, },
			{{-1, ERROR, 60}, {6, SHIFT, 90}, {11, SHIFT, 91}, },
			{{-1, ERROR, 61}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 50}, {20, SHIFT, 93}, {21, SHIFT, 94}, {45, SHIFT, 95}, {46, SHIFT, 96}, {47, SHIFT, 97}, {48, SHIFT, 98}, {49, SHIFT, 99}, {50, SHIFT, 100}, },
			{{-1, REDUCE, 55}, {22, SHIFT, 103}, {23, SHIFT, 104}, },
			{{-1, ERROR, 64}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {21, SHIFT, 56}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 63}, {42, SHIFT, 108}, {43, SHIFT, 109}, {44, SHIFT, 110}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 69}, {20, SHIFT, 93}, {21, SHIFT, 94}, {45, SHIFT, 95}, {46, SHIFT, 96}, {47, SHIFT, 97}, {48, SHIFT, 98}, {49, SHIFT, 99}, {50, SHIFT, 100}, },
			{{-1, ERROR, 70}, {10, SHIFT, 55}, {11, SHIFT, 113}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 72}, {10, SHIFT, 55}, {11, SHIFT, 115}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 73}, {10, SHIFT, 116}, },
			{{-1, REDUCE, 35}, },
			{{-1, ERROR, 75}, {11, SHIFT, 117}, },
			{{-1, ERROR, 76}, {17, SHIFT, 118}, },
			{{-1, ERROR, 77}, {9, SHIFT, 119}, },
			{{-1, ERROR, 78}, {7, SHIFT, 120}, },
			{{-1, ERROR, 79}, {32, SHIFT, 121}, },
			{{-1, ERROR, 80}, {35, SHIFT, 46}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 83}, {6, SHIFT, 81}, {7, SHIFT, 123}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 85}, {7, SHIFT, 124}, },
			{{-1, ERROR, 86}, {6, SHIFT, 81}, {11, SHIFT, 125}, },
			{{-1, ERROR, 87}, {11, SHIFT, 126}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 91}, {7, SHIFT, 127}, },
			{{-1, REDUCE, 66}, {20, SHIFT, 93}, {21, SHIFT, 94}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 77}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 101}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 70}, },
			{{-1, ERROR, 105}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {52, SHIFT, 22}, },
			{{-1, ERROR, 106}, {6, SHIFT, 90}, {11, SHIFT, 130}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 112}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 113}, {27, SHIFT, 132}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 115}, {32, SHIFT, 133}, },
			{{-1, ERROR, 116}, {10, SHIFT, 55}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 44}, {38, SHIFT, 135}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 121}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 125}, {7, SHIFT, 140}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 54}, {22, SHIFT, 103}, {23, SHIFT, 104}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 130}, {7, SHIFT, 141}, },
			{{-1, REDUCE, 71}, },
			{{-1, ERROR, 132}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 133}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 134}, {10, SHIFT, 55}, {11, SHIFT, 144}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, {51, SHIFT, 57}, {52, SHIFT, 22}, },
			{{-1, ERROR, 135}, {17, SHIFT, 30}, {18, SHIFT, 31}, {19, SHIFT, 32}, },
			{{-1, REDUCE, 40}, {28, SHIFT, 146}, },
			{{-1, REDUCE, 43}, {38, SHIFT, 135}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 139}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {40, SHIFT, 150}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 38}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {28, SHIFT, 151}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 143}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {31, SHIFT, 154}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 144}, {7, SHIFT, 155}, },
			{{-1, ERROR, 145}, {5, SHIFT, 156}, },
			{{-1, ERROR, 146}, {5, SHIFT, 157}, },
			{{-1, ERROR, 147}, {37, SHIFT, 158}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 150}, {7, SHIFT, 159}, },
			{{-1, ERROR, 151}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 152}, {29, SHIFT, 161}, },
			{{-1, REDUCE, 37}, },
			{{-1, ERROR, 154}, {7, SHIFT, 162}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 156}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 157}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 158}, {7, SHIFT, 165}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 41}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, ERROR, 161}, {7, SHIFT, 166}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 47}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 42}, {24, SHIFT, 15}, {25, SHIFT, 16}, {26, SHIFT, 17}, {30, SHIFT, 18}, {33, SHIFT, 19}, {36, SHIFT, 20}, {39, SHIFT, 21}, {52, SHIFT, 22}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 9}, },
			{{-1, 23}, },
			{{-1, 10}, },
			{{-1, 24}, },
			{{-1, 11}, {10, 28}, },
			{{-1, 12}, },
			{{-1, 58}, {9, 25}, {19, 25}, {21, 41}, {24, 25}, {29, 49}, {34, 53}, {39, 25}, {50, 83}, {54, 86}, {121, 25}, {132, 25}, {133, 25}, {139, 25}, {142, 25}, {143, 25}, {151, 25}, {156, 25}, {157, 25}, {160, 25}, {163, 25}, {164, 25}, },
			{{-1, 50}, {34, 54}, },
			{{-1, 51}, {50, 84}, {54, 84}, },
			{{-1, 59}, {14, 33}, {135, 145}, },
			{{-1, 38}, {9, 26}, {24, 44}, {39, 74}, {139, 74}, {142, 74}, {143, 74}, {160, 74}, {163, 74}, {164, 74}, },
			{{-1, 39}, {121, 139}, {132, 142}, {133, 143}, {151, 160}, {156, 163}, {157, 164}, },
			{{-1, 152}, },
			{{-1, 147}, },
			{{-1, 153}, },
			{{-1, 148}, },
			{{-1, 136}, },
			{{-1, 137}, },
			{{-1, 138}, {137, 149}, },
			{{-1, 27}, },
			{{-1, 48}, {80, 122}, },
			{{-1, 60}, {40, 75}, {45, 78}, {55, 87}, {56, 88}, {64, 106}, },
			{{-1, 61}, },
			{{-1, 69}, {35, 62}, {40, 62}, {45, 62}, {55, 62}, {56, 62}, {61, 92}, {64, 62}, },
			{{-1, 63}, {101, 128}, },
			{{-1, 64}, },
			{{-1, 65}, {64, 107}, },
			{{-1, 70}, {37, 72}, {116, 134}, },
			{{-1, 66}, {36, 71}, {37, 71}, {57, 89}, {70, 114}, {72, 114}, {112, 131}, {116, 71}, {134, 114}, },
			{{-1, 67}, },
			{{-1, 101}, },
			{{-1, 105}, },
			{{-1, 111}, },
			{{-1, 112}, },
			{{-1, 102}, },
			{{-1, 68}, {105, 129}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'programa'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'fim.', 'const', 'inteiro', 'real', 'caractere', 'leia', 'escreva', 'se', 'enquanto', 'repita', 'avalie', 'para', id",
			"expecting: 'inicio'",
			"expecting: ':'",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'enquanto', 'repita', 'avalie', 'para', id",
			"expecting: n inteiro, n real, string",
			"expecting: '('",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'repita', 'avalie', 'para', id",
			"expecting: ',', ';', '[', '(', ')', '<-', n inteiro, n real, string, '+', '-', '*', '/', 'de', 'e', 'ou', 'xor', '=', '<>', '<', '>', '<=', '>=', 'nao', id",
			"expecting: 'fim.'",
			"expecting: '<-'",
			"expecting: 'ate', 'passo'",
			"expecting: ':', ',', ';', '(', ')', n inteiro, n real, string, '+', '-', '*', '/', 'e', 'ou', 'xor', '=', '<>', '<', '>', '<=', '>=', 'nao', id",
			"expecting: ';'",
			"expecting: '(', n inteiro, n real, string, '-', 'nao', id",
			"expecting: '(', n inteiro, n real, string, 'nao', id",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'fim se', 'enquanto', 'fim enquanto', 'repita', 'ate', 'avalie', 'fim avalie', 'caso', 'para', 'fim para', id",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'repita', 'ate', 'avalie', 'para', id",
			"expecting: 'de'",
			"expecting: n inteiro",
			"expecting: 'fim.', 'leia', 'escreva', 'se', 'senao', 'fim se', 'enquanto', 'fim enquanto', 'repita', 'ate', 'avalie', 'fim avalie', 'caso', 'para', 'fim para', id",
			"expecting: ',', ';'",
			"expecting: ',', ')'",
			"expecting: ',', ';', '(', ')', n inteiro, n real, string, '+', '-', '*', '/', 'e', 'ou', 'xor', '=', '<>', '<', '>', '<=', '>=', 'nao', id",
			"expecting: '(', n inteiro, n real, string, id",
			"expecting: ',', ';', ')', '+', '-', '=', '<>', '<', '>', '<=', '>='",
			"expecting: ',', ';', ')'",
			"expecting: ',', ';', '(', ')', n inteiro, n real, string, 'e', 'ou', 'xor', 'nao', id",
			"expecting: '+', '-', '=', '<>', '<', '>', '<=', '>='",
			"expecting: '(', ')', n inteiro, n real, string, 'nao', id",
			"expecting: ')'",
			"expecting: ']'",
			"expecting: 'faca'",
			"expecting: 'ate'",
			"expecting: ',', ';', '(', ')', n inteiro, n real, string, 'nao', id",
			"expecting: ',', ';', '(', ')', n inteiro, n real, string, '+', '-', 'e', 'ou', 'xor', 'nao', id",
			"expecting: 'entao'",
			"expecting: 'senao', 'fim avalie', 'caso'",
			"expecting: ',', ';', '(', ')', '<-', n inteiro, n real, string, '+', '-', '*', '/', 'de', 'e', 'ou', 'xor', '=', '<>', '<', '>', '<=', '>=', 'nao', id",
			"expecting: 'senao', 'fim avalie'",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'repita', 'avalie', 'para', 'fim para', id",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'fim se', 'enquanto', 'repita', 'avalie', 'para', id",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'fim enquanto', 'repita', 'avalie', 'para', id",
			"expecting: 'fim avalie'",
			"expecting: 'fim se'",
			"expecting: 'leia', 'escreva', 'se', 'fim se', 'enquanto', 'repita', 'avalie', 'para', id",
			"expecting: 'leia', 'escreva', 'se', 'senao', 'enquanto', 'repita', 'avalie', 'fim avalie', 'caso', 'para', id",
			"expecting: 'leia', 'escreva', 'se', 'enquanto', 'repita', 'avalie', 'fim avalie', 'para', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 5, 6, 3, 3, 5, 3, 7, 8, 8, 8, 8, 9, 8, 1, 10, 11, 6, 12, 6, 13, 3, 1, 14, 14, 14, 15, 1, 16, 17, 17, 18, 19, 16, 20, 21, 2, 6, 16, 21, 21, 22, 23, 1, 1, 3, 24, 1, 16, 16, 17, 25, 25, 24, 26, 27, 25, 16, 16, 28, 29, 25, 30, 31, 31, 31, 8, 18, 32, 21, 33, 15, 34, 35, 1, 3, 23, 1, 15, 24, 32, 28, 36, 16, 15, 37, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 24, 16, 17, 17, 17, 36, 17, 38, 31, 34, 17, 39, 13, 40, 22, 9, 22, 3, 22, 15, 25, 22, 25, 25, 15, 36, 9, 9, 31, 7, 41, 39, 39, 42, 22, 22, 43, 44, 15, 5, 5, 45, 45, 39, 15, 9, 46, 46, 15, 22, 9, 9, 15, 22, 47, 15, 22, 48, 49, 22, 22, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
