/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class ASomaRelacional extends PSomaRelacional
{
    private PSomaExp _somaExp_;
    private PRelacional _relacional_;

    public ASomaRelacional()
    {
        // Constructor
    }

    public ASomaRelacional(
        @SuppressWarnings("hiding") PSomaExp _somaExp_,
        @SuppressWarnings("hiding") PRelacional _relacional_)
    {
        // Constructor
        setSomaExp(_somaExp_);

        setRelacional(_relacional_);

    }

    @Override
    public Object clone()
    {
        return new ASomaRelacional(
            cloneNode(this._somaExp_),
            cloneNode(this._relacional_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASomaRelacional(this);
    }

    public PSomaExp getSomaExp()
    {
        return this._somaExp_;
    }

    public void setSomaExp(PSomaExp node)
    {
        if(this._somaExp_ != null)
        {
            this._somaExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._somaExp_ = node;
    }

    public PRelacional getRelacional()
    {
        return this._relacional_;
    }

    public void setRelacional(PRelacional node)
    {
        if(this._relacional_ != null)
        {
            this._relacional_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._relacional_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._somaExp_)
            + toString(this._relacional_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._somaExp_ == child)
        {
            this._somaExp_ = null;
            return;
        }

        if(this._relacional_ == child)
        {
            this._relacional_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._somaExp_ == oldChild)
        {
            setSomaExp((PSomaExp) newChild);
            return;
        }

        if(this._relacional_ == oldChild)
        {
            setRelacional((PRelacional) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
