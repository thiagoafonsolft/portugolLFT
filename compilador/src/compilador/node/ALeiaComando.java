/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class ALeiaComando extends PComando
{
    private TLeia _leia_;
    private TAbreparentese _abreparentese_;
    private PVarVirgulaOp _varVirgulaOp_;
    private PVar _var_;
    private TFechaparentese _fechaparentese_;
    private TPontovirgula _pontovirgula_;

    public ALeiaComando()
    {
        // Constructor
    }

    public ALeiaComando(
        @SuppressWarnings("hiding") TLeia _leia_,
        @SuppressWarnings("hiding") TAbreparentese _abreparentese_,
        @SuppressWarnings("hiding") PVarVirgulaOp _varVirgulaOp_,
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TFechaparentese _fechaparentese_,
        @SuppressWarnings("hiding") TPontovirgula _pontovirgula_)
    {
        // Constructor
        setLeia(_leia_);

        setAbreparentese(_abreparentese_);

        setVarVirgulaOp(_varVirgulaOp_);

        setVar(_var_);

        setFechaparentese(_fechaparentese_);

        setPontovirgula(_pontovirgula_);

    }

    @Override
    public Object clone()
    {
        return new ALeiaComando(
            cloneNode(this._leia_),
            cloneNode(this._abreparentese_),
            cloneNode(this._varVirgulaOp_),
            cloneNode(this._var_),
            cloneNode(this._fechaparentese_),
            cloneNode(this._pontovirgula_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALeiaComando(this);
    }

    public TLeia getLeia()
    {
        return this._leia_;
    }

    public void setLeia(TLeia node)
    {
        if(this._leia_ != null)
        {
            this._leia_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._leia_ = node;
    }

    public TAbreparentese getAbreparentese()
    {
        return this._abreparentese_;
    }

    public void setAbreparentese(TAbreparentese node)
    {
        if(this._abreparentese_ != null)
        {
            this._abreparentese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._abreparentese_ = node;
    }

    public PVarVirgulaOp getVarVirgulaOp()
    {
        return this._varVirgulaOp_;
    }

    public void setVarVirgulaOp(PVarVirgulaOp node)
    {
        if(this._varVirgulaOp_ != null)
        {
            this._varVirgulaOp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varVirgulaOp_ = node;
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TFechaparentese getFechaparentese()
    {
        return this._fechaparentese_;
    }

    public void setFechaparentese(TFechaparentese node)
    {
        if(this._fechaparentese_ != null)
        {
            this._fechaparentese_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fechaparentese_ = node;
    }

    public TPontovirgula getPontovirgula()
    {
        return this._pontovirgula_;
    }

    public void setPontovirgula(TPontovirgula node)
    {
        if(this._pontovirgula_ != null)
        {
            this._pontovirgula_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pontovirgula_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._leia_)
            + toString(this._abreparentese_)
            + toString(this._varVirgulaOp_)
            + toString(this._var_)
            + toString(this._fechaparentese_)
            + toString(this._pontovirgula_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._leia_ == child)
        {
            this._leia_ = null;
            return;
        }

        if(this._abreparentese_ == child)
        {
            this._abreparentese_ = null;
            return;
        }

        if(this._varVirgulaOp_ == child)
        {
            this._varVirgulaOp_ = null;
            return;
        }

        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._fechaparentese_ == child)
        {
            this._fechaparentese_ = null;
            return;
        }

        if(this._pontovirgula_ == child)
        {
            this._pontovirgula_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._leia_ == oldChild)
        {
            setLeia((TLeia) newChild);
            return;
        }

        if(this._abreparentese_ == oldChild)
        {
            setAbreparentese((TAbreparentese) newChild);
            return;
        }

        if(this._varVirgulaOp_ == oldChild)
        {
            setVarVirgulaOp((PVarVirgulaOp) newChild);
            return;
        }

        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._fechaparentese_ == oldChild)
        {
            setFechaparentese((TFechaparentese) newChild);
            return;
        }

        if(this._pontovirgula_ == oldChild)
        {
            setPontovirgula((TPontovirgula) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
