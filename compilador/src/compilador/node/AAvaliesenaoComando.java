/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AAvaliesenaoComando extends PComando
{
    private PExpressao _expressao_;
    private final LinkedList<PValor> _valor_ = new LinkedList<PValor>();
    private final LinkedList<PComando> _caso_ = new LinkedList<PComando>();
    private final LinkedList<PComando> _senao_ = new LinkedList<PComando>();

    public AAvaliesenaoComando()
    {
        // Constructor
    }

    public AAvaliesenaoComando(
        @SuppressWarnings("hiding") PExpressao _expressao_,
        @SuppressWarnings("hiding") List<?> _valor_,
        @SuppressWarnings("hiding") List<?> _caso_,
        @SuppressWarnings("hiding") List<?> _senao_)
    {
        // Constructor
        setExpressao(_expressao_);

        setValor(_valor_);

        setCaso(_caso_);

        setSenao(_senao_);

    }

    @Override
    public Object clone()
    {
        return new AAvaliesenaoComando(
            cloneNode(this._expressao_),
            cloneList(this._valor_),
            cloneList(this._caso_),
            cloneList(this._senao_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAvaliesenaoComando(this);
    }

    public PExpressao getExpressao()
    {
        return this._expressao_;
    }

    public void setExpressao(PExpressao node)
    {
        if(this._expressao_ != null)
        {
            this._expressao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expressao_ = node;
    }

    public LinkedList<PValor> getValor()
    {
        return this._valor_;
    }

    public void setValor(List<?> list)
    {
        for(PValor e : this._valor_)
        {
            e.parent(null);
        }
        this._valor_.clear();

        for(Object obj_e : list)
        {
            PValor e = (PValor) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._valor_.add(e);
        }
    }

    public LinkedList<PComando> getCaso()
    {
        return this._caso_;
    }

    public void setCaso(List<?> list)
    {
        for(PComando e : this._caso_)
        {
            e.parent(null);
        }
        this._caso_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._caso_.add(e);
        }
    }

    public LinkedList<PComando> getSenao()
    {
        return this._senao_;
    }

    public void setSenao(List<?> list)
    {
        for(PComando e : this._senao_)
        {
            e.parent(null);
        }
        this._senao_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._senao_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expressao_)
            + toString(this._valor_)
            + toString(this._caso_)
            + toString(this._senao_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expressao_ == child)
        {
            this._expressao_ = null;
            return;
        }

        if(this._valor_.remove(child))
        {
            return;
        }

        if(this._caso_.remove(child))
        {
            return;
        }

        if(this._senao_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expressao_ == oldChild)
        {
            setExpressao((PExpressao) newChild);
            return;
        }

        for(ListIterator<PValor> i = this._valor_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PValor) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._caso_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PComando> i = this._senao_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
