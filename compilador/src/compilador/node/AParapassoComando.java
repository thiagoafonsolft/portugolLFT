/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AParapassoComando extends PComando
{
    private PVar _var_;
    private TNInteiro _nInteiro_;
    private TNInteiro _left_;
    private TNInteiro _right_;
    private final LinkedList<PComando> _comando_ = new LinkedList<PComando>();

    public AParapassoComando()
    {
        // Constructor
    }

    public AParapassoComando(
        @SuppressWarnings("hiding") PVar _var_,
        @SuppressWarnings("hiding") TNInteiro _nInteiro_,
        @SuppressWarnings("hiding") TNInteiro _left_,
        @SuppressWarnings("hiding") TNInteiro _right_,
        @SuppressWarnings("hiding") List<?> _comando_)
    {
        // Constructor
        setVar(_var_);

        setNInteiro(_nInteiro_);

        setLeft(_left_);

        setRight(_right_);

        setComando(_comando_);

    }

    @Override
    public Object clone()
    {
        return new AParapassoComando(
            cloneNode(this._var_),
            cloneNode(this._nInteiro_),
            cloneNode(this._left_),
            cloneNode(this._right_),
            cloneList(this._comando_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParapassoComando(this);
    }

    public PVar getVar()
    {
        return this._var_;
    }

    public void setVar(PVar node)
    {
        if(this._var_ != null)
        {
            this._var_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._var_ = node;
    }

    public TNInteiro getNInteiro()
    {
        return this._nInteiro_;
    }

    public void setNInteiro(TNInteiro node)
    {
        if(this._nInteiro_ != null)
        {
            this._nInteiro_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nInteiro_ = node;
    }

    public TNInteiro getLeft()
    {
        return this._left_;
    }

    public void setLeft(TNInteiro node)
    {
        if(this._left_ != null)
        {
            this._left_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._left_ = node;
    }

    public TNInteiro getRight()
    {
        return this._right_;
    }

    public void setRight(TNInteiro node)
    {
        if(this._right_ != null)
        {
            this._right_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._right_ = node;
    }

    public LinkedList<PComando> getComando()
    {
        return this._comando_;
    }

    public void setComando(List<?> list)
    {
        for(PComando e : this._comando_)
        {
            e.parent(null);
        }
        this._comando_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comando_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._var_)
            + toString(this._nInteiro_)
            + toString(this._left_)
            + toString(this._right_)
            + toString(this._comando_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._var_ == child)
        {
            this._var_ = null;
            return;
        }

        if(this._nInteiro_ == child)
        {
            this._nInteiro_ = null;
            return;
        }

        if(this._left_ == child)
        {
            this._left_ = null;
            return;
        }

        if(this._right_ == child)
        {
            this._right_ = null;
            return;
        }

        if(this._comando_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._var_ == oldChild)
        {
            setVar((PVar) newChild);
            return;
        }

        if(this._nInteiro_ == oldChild)
        {
            setNInteiro((TNInteiro) newChild);
            return;
        }

        if(this._left_ == oldChild)
        {
            setLeft((TNInteiro) newChild);
            return;
        }

        if(this._right_ == oldChild)
        {
            setRight((TNInteiro) newChild);
            return;
        }

        for(ListIterator<PComando> i = this._comando_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
